{"version":3,"file":"7014.js","mappings":"8KAEA,MAEMA,EAAgB,MACpBC,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GAKvBE,KAAKC,MAAQ,YACf,CAEAC,eACE,MAGMC,EAHUH,KAAKI,GAAGC,WAAWC,cAAc,wBACvBC,iBAAiB,CAAEC,SAAS,IAAQ,GAEtCC,WAAU,GAGlC,MAFA,CAACN,KAAUA,EAAMO,iBAAiB,SAASC,SAAQP,GAAMA,EAAGQ,gBAAgB,QAC5ET,EAAMU,KAAO,YACNV,CACT,CACAW,mBACE,MACMC,EADUf,KAAKI,GAAGC,WAAWC,cAAc,oBAC3BC,mBAAmBS,QAAOC,GACrB,kBAAlBA,EAAKC,WAEdH,EAAMJ,SAAQ,CAACQ,EAAMC,KAGD,OADAD,EAAKb,cAAc,uBAEnCa,EAAKE,OAAOrB,KAAKE,gBAGfkB,IAAUL,EAAMO,OAAS,EAC3BH,EAAKI,aAAa,eAAgB,QAGlCJ,EAAKP,gBAAgB,eACvB,GAEJ,CACAY,SACE,OAAQ,IAAAC,GAAE,EAAAC,EAAU,MAAM,IAAAD,GAAE,MAAO,CAAEE,KAAM,OAAQC,MAAO,aAAc,aAAc5B,KAAKC,QAAS,IAAAwB,GAAE,OAAQ,CAAEI,aAAc,IAAM7B,KAAKc,uBAAwB,IAAAW,GAAE,MAAO,CAAEK,QAAQ,EAAM,cAAe,SAAU,IAAAL,GAAE,OAAQ,CAAEM,KAAM,cAAe,IAAAN,GAAE,UAAW,CAAEM,KAAM,oBAC3Q,CACI3B,SAAO,OAAO,IAAA4B,GAAWhC,KAAO,GAEtCJ,EAAcqC,MA9CW,iF","sources":["webpack://sureforms/./node_modules/@surecart/components/dist/esm/sc-breadcrumbs.entry.js"],"sourcesContent":["import { r as registerInstance, h, F as Fragment, g as getElement } from './index-430bb51b.js';\n\nconst scBreadcrumbsCss = \":host{display:block}.breadcrumb{display:flex;align-items:center;flex-wrap:wrap}\";\n\nconst ScBreadcrumbs = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /**\n     * The label to use for the breadcrumb control. This will not be shown, but it will be announced by screen readers and\n     * other assistive devices.\n     */\n    this.label = 'Breadcrumb';\n  }\n  // Generates a clone of the separator element to use for each breadcrumb item\n  getSeparator() {\n    const slotted = this.el.shadowRoot.querySelector('slot[name=separator]');\n    const separator = slotted.assignedElements({ flatten: true })[0];\n    // Clone it, remove ids, and slot it\n    const clone = separator.cloneNode(true);\n    [clone, ...clone.querySelectorAll('[id]')].forEach(el => el.removeAttribute('id'));\n    clone.slot = 'separator';\n    return clone;\n  }\n  handleSlotChange() {\n    const slotted = this.el.shadowRoot.querySelector('.breadcrumb slot');\n    const items = slotted.assignedElements().filter(node => {\n      return node.nodeName === 'CE-BREADCRUMB';\n    });\n    items.forEach((item, index) => {\n      // Append separators to each item if they don't already have one\n      const separator = item.querySelector('[slot=\"separator\"]');\n      if (separator === null) {\n        item.append(this.getSeparator());\n      }\n      // The last breadcrumb item is the \"current page\"\n      if (index === items.length - 1) {\n        item.setAttribute('aria-current', 'page');\n      }\n      else {\n        item.removeAttribute('aria-current');\n      }\n    });\n  }\n  render() {\n    return (h(Fragment, null, h(\"nav\", { part: \"base\", class: \"breadcrumb\", \"aria-label\": this.label }, h(\"slot\", { onSlotchange: () => this.handleSlotChange() })), h(\"div\", { hidden: true, \"aria-hidden\": \"true\" }, h(\"slot\", { name: \"separator\" }, h(\"sc-icon\", { name: \"chevron-right\" })))));\n  }\n  get el() { return getElement(this); }\n};\nScBreadcrumbs.style = scBreadcrumbsCss;\n\nexport { ScBreadcrumbs as sc_breadcrumbs };\n"],"names":["ScBreadcrumbs","constructor","hostRef","r","this","label","getSeparator","clone","el","shadowRoot","querySelector","assignedElements","flatten","cloneNode","querySelectorAll","forEach","removeAttribute","slot","handleSlotChange","items","filter","node","nodeName","item","index","append","length","setAttribute","render","h","F","part","class","onSlotchange","hidden","name","g","style"],"sourceRoot":""}