{"version":3,"file":"5581.js","mappings":"0JAQIA,EAAe,SAAUC,EAAWC,EAAOC,QACxB,IAAfA,IAAyBA,GAAa,GAC1C,IACIC,EADgD,aAA/BH,EAAUI,YAAYC,KACfL,EAAUM,UAAYN,EAC9CO,EAAoBJ,EAAMI,kBAC9BJ,EAAMI,kBAAoB,WACtB,IAXAC,EAWIC,EAAQC,KACRC,GAAK,IAAAC,GAAWF,MAChBG,EAXD,CAAEC,QADK,IAAIC,SAAQ,SAAUC,GAAOR,EAAUQ,CAAK,IAC/BR,QAASA,GAY5BS,EAAQ,IAAIC,YAAY,eAAgB,CACxCC,SAAS,EACTC,UAAU,EACVC,OAAQ,CACJC,SAAUZ,KACVa,OAAQtB,EACRuB,QAAS,SAAUC,EAAMC,IACPD,KAAQd,EAAMA,EAAKF,GAC1BgB,GAAQC,CACnB,EACAb,OAAQA,KAGhBF,EAAGgB,cAAcV,GACjB,IAAIW,EAAW,WACX,GAAIrB,EACA,OAAOA,EAAkBsB,KAAKpB,EAEtC,EACA,OAAOP,EAAaW,EAAOC,QAAQgB,MAAK,WAAc,OAAOF,GAAY,IAAMA,GACnF,CACJ,C,sGCnCA,MAAMG,EAAkB,MACtB3B,YAAY4B,IACV,IAAAC,GAAiBvB,KAAMsB,GAEvBtB,KAAKwB,KAAO,SAEZxB,KAAKgB,MAAQ,GAEbhB,KAAKyB,MAAO,EAEZzB,KAAK0B,WAAY,EAEjB1B,KAAK2B,KAAO,GAEZ3B,KAAK4B,UAAW,EAEhB5B,KAAK6B,UAAW,EAEhB7B,KAAK8B,UAAW,CAClB,CACAC,uBACE,OAAO/B,KAAKgC,MAAMC,gBACpB,CACAC,SACE,OAAIlC,KAAKmC,SACA,MAED,IAAAC,GAAE,WAAY,CAAEC,IAAKpC,GAAOD,KAAKgC,MAAQ/B,EAAKqC,MAAOtC,KAAKsC,MAAOX,KAAM3B,KAAK2B,KAAMY,UAAWvC,KAAKuC,UAAWC,YAAaxC,KAAKwC,YAAad,UAAW1B,KAAK0B,UAAWF,KAAMxB,KAAKwB,KAAOxB,KAAKwB,KAAO,SAAUiB,KAAM,WAAY9C,KAAM,WAAYqB,MAAOhB,KAAKgB,MAAOc,SAAU9B,KAAK8B,SAAUF,SAAU5B,KAAK4B,UACxT,IAEF,IAAAc,GAAarB,EAAiB,CAAC,aAAa,E","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/consumer-1db89974.js","webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-order-password.entry.js"],"sourcesContent":["import { g as getElement } from './index-430bb51b.js';\n\nvar createDeferredPromise = function () {\n    var resolve;\n    var promise = new Promise(function (res) { resolve = res; });\n    return { promise: promise, resolve: resolve };\n};\n\nvar openWormhole = function (Component, props, isBlocking) {\n    if (isBlocking === void 0) { isBlocking = true; }\n    var isConstructor = (Component.constructor.name === 'Function');\n    var Proto = isConstructor ? Component.prototype : Component;\n    var componentWillLoad = Proto.componentWillLoad;\n    Proto.componentWillLoad = function () {\n        var _this = this;\n        var el = getElement(this);\n        var onOpen = createDeferredPromise();\n        var event = new CustomEvent('openWormhole', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                consumer: this,\n                fields: props,\n                updater: function (prop, value) {\n                    var target = (prop in el) ? el : _this;\n                    target[prop] = value;\n                },\n                onOpen: onOpen,\n            },\n        });\n        el.dispatchEvent(event);\n        var willLoad = function () {\n            if (componentWillLoad) {\n                return componentWillLoad.call(_this);\n            }\n        };\n        return isBlocking ? onOpen.promise.then(function () { return willLoad(); }) : (willLoad());\n    };\n};\n\nexport { openWormhole as o };\n","import { r as registerInstance, h } from './index-430bb51b.js';\nimport { o as openWormhole } from './consumer-1db89974.js';\n\nconst ScOrderPassword = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The input's size. */\n    this.size = 'medium';\n    /** The input's value attribute. */\n    this.value = '';\n    /** Draws a pill-style input with rounded edges. */\n    this.pill = false;\n    /** Should we show the label */\n    this.showLabel = true;\n    /** The input's help text. */\n    this.help = '';\n    /** Disables the input. */\n    this.disabled = false;\n    /** Makes the input readonly. */\n    this.readonly = false;\n    /** Makes the input a required field. */\n    this.required = false;\n  }\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n  render() {\n    if (this.loggedIn) {\n      return null;\n    }\n    return (h(\"sc-input\", { ref: el => (this.input = el), label: this.label, help: this.help, autofocus: this.autofocus, placeholder: this.placeholder, showLabel: this.showLabel, size: this.size ? this.size : 'medium', type: \"password\", name: \"password\", value: this.value, required: this.required, disabled: this.disabled }));\n  }\n};\nopenWormhole(ScOrderPassword, ['loggedIn'], false);\n\nexport { ScOrderPassword as sc_order_password };\n"],"names":["openWormhole","Component","props","isBlocking","Proto","constructor","name","prototype","componentWillLoad","resolve","_this","this","el","g","onOpen","promise","Promise","res","event","CustomEvent","bubbles","composed","detail","consumer","fields","updater","prop","value","dispatchEvent","willLoad","call","then","ScOrderPassword","hostRef","r","size","pill","showLabel","help","disabled","readonly","required","async","input","reportValidity","render","loggedIn","h","ref","label","autofocus","placeholder","type","o"],"sourceRoot":""}