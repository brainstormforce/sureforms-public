{"version":3,"file":"6711.js","mappings":"wNAEA,MAEMA,EAAgB,MACpBC,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,EACzB,CACAG,SACE,OAAO,IAAAC,GAAE,OAAQ,KACnB,GAEFN,EAAcO,MAVW,4EAYzB,MAEMC,EAAmB,MACvBP,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GACvBE,KAAKK,OAAS,QACdL,KAAKM,WAAa,IAClBN,KAAKO,WAAY,EACjBP,KAAKQ,WAAY,CACnB,CACAC,mBAEM,mBAAoBC,QACb,IAAIA,OAAOC,gBAAeC,IACjCA,EAAQC,SAAQC,IACdd,KAAKe,MAAQD,EAAME,YAAYD,KAAK,GACpC,IAEDE,QAAQjB,KAAKkB,GAEpB,CACAC,mBACEnB,KAAKO,YAAcP,KAAKkB,GAAGE,cAAc,mBACzCpB,KAAKQ,YAAcR,KAAKkB,GAAGE,cAAc,kBAC3C,CACAnB,SACE,MAAMoB,EAAMrB,KAAKsB,KAAO,IAAM,MAC9B,OAAQ,IAAApB,GAAEmB,EAAK,CAAEC,KAAMtB,KAAKsB,KAAMjB,OAAQL,KAAKK,OAAQkB,MAAO,CAC1D,YAAY,EACZ,uBAAwBvB,KAAKO,UAC7B,uBAAwBP,KAAKQ,UAC7B,gBAAiBR,KAAKe,OAASf,KAAKM,cACjC,IAAAJ,GAAE,OAAQ,CAAEqB,MAAO,qBAAsB,IAAArB,GAAE,OAAQ,CAAEsB,KAAM,SAAUC,aAAc,IAAMzB,KAAKmB,uBAAwB,IAAAjB,GAAE,OAAQ,CAAEuB,aAAc,IAAMzB,KAAKmB,sBAAuB,IAAAjB,GAAE,OAAQ,CAAEqB,MAAO,qBAAsB,IAAArB,GAAE,OAAQ,CAAEsB,KAAM,SAAUC,aAAc,IAAMzB,KAAKmB,sBACzR,CACID,SAAO,OAAO,IAAAQ,GAAW1B,KAAO,GAEtCI,EAAiBD,MApCW,+lC","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-stacked-list_2.entry.js"],"sourcesContent":["import { r as registerInstance, h, g as getElement } from './index-430bb51b.js';\n\nconst scStackedListCss = \":host{display:block;font-family:var(--sc-font-sans)}:slotted(*){margin:0}\";\n\nconst ScStackedList = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n};\nScStackedList.style = scStackedListCss;\n\nconst scStackedListRowCss = \":host{display:block;--column-width-min:125px;position:relative}:host(:not(:last-child)){border-bottom:1px solid var(--sc-color-gray-200)}.list-row{color:var(--sc-color-gray-800);text-decoration:none;display:grid;justify-content:space-between;grid-template-columns:repeat(auto-fit, minmax(100%, 1fr));gap:var(--sc-spacing-xx-small);padding:var(--sc-spacing-medium) var(--sc-spacing-large);transition:background-color var(--sc-transition-fast) ease;min-width:0px;min-height:0px}.list-row[href]:hover{background:var(--sc-stacked-list-row-hover-color, var(--sc-color-gray-50))}.list-row__prefix,.list-row__suffix{position:absolute;top:50%;transform:translateY(-50%);z-index:1}.list-row__prefix{left:var(--sc-spacing-large)}.list-row__suffix{right:var(--sc-spacing-large)}.list-row--has-prefix{padding-left:var(--sc-spacing-xxxx-large)}.list-row--has-suffix{padding-right:var(--sc-spacing-xxxx-large)}.list-row.breakpoint-lg{grid-template-columns:repeat(calc(var(--columns) - 1), 1fr) 0.5fr;gap:var(--sc-spacing-large)}.list-row.breakpoint-lg ::slotted(:last-child:not(:first-child)){display:flex;justify-content:flex-end}\";\n\nconst ScStackedListRow = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.target = '_self';\n    this.mobileSize = 600;\n    this.hasPrefix = false;\n    this.hasSuffix = false;\n  }\n  componentDidLoad() {\n    // Only run if ResizeObserver is supported.\n    if ('ResizeObserver' in window) {\n      var ro = new window.ResizeObserver(entries => {\n        entries.forEach(entry => {\n          this.width = entry.contentRect.width;\n        });\n      });\n      ro.observe(this.el);\n    }\n  }\n  handleSlotChange() {\n    this.hasPrefix = !!this.el.querySelector('[slot=\"prefix\"]');\n    this.hasSuffix = !!this.el.querySelector('[slot=\"suffix\"]');\n  }\n  render() {\n    const Tag = this.href ? 'a' : 'div';\n    return (h(Tag, { href: this.href, target: this.target, class: {\n        'list-row': true,\n        'list-row--has-prefix': this.hasPrefix,\n        'list-row--has-suffix': this.hasSuffix,\n        'breakpoint-lg': this.width >= this.mobileSize,\n      } }, h(\"span\", { class: \"list-row__prefix\" }, h(\"slot\", { name: \"prefix\", onSlotchange: () => this.handleSlotChange() })), h(\"slot\", { onSlotchange: () => this.handleSlotChange() }), h(\"span\", { class: \"list-row__suffix\" }, h(\"slot\", { name: \"suffix\", onSlotchange: () => this.handleSlotChange() }))));\n  }\n  get el() { return getElement(this); }\n};\nScStackedListRow.style = scStackedListRowCss;\n\nexport { ScStackedList as sc_stacked_list, ScStackedListRow as sc_stacked_list_row };\n"],"names":["ScStackedList","constructor","hostRef","r","this","render","h","style","ScStackedListRow","target","mobileSize","hasPrefix","hasSuffix","componentDidLoad","window","ResizeObserver","entries","forEach","entry","width","contentRect","observe","el","handleSlotChange","querySelector","Tag","href","class","name","onSlotchange","g"],"sourceRoot":""}