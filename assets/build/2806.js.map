{"version":3,"file":"2806.js","mappings":"2MAEA,MAAMA,EAAe,MACnBC,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GAEvBE,KAAKC,KAAO,IAAIC,KAEhBF,KAAKG,WAAa,OAClBH,KAAKI,KAAO,MACd,CACAC,SACE,MAAMC,EAA2B,cAAdN,KAAKI,KAAwD,IAAjCG,SAASP,KAAKC,KAAKO,YAAqBR,KAAKC,KACtFA,EAAO,IAAIC,KAAKI,GAChBG,EAA6B,SAApBT,KAAKG,gBAAwBO,EAAgC,OAApBV,KAAKG,WAE7D,IAAIQ,MAAMV,EAAKW,mBAGf,OAAO,IAAIC,KAAKC,eAAed,KAAKe,OAAQ,CAC1CC,QAAShB,KAAKgB,QACdC,IAAKjB,KAAKiB,IACVC,KAAMlB,KAAKkB,KACXC,MAAOnB,KAAKmB,MACZC,IAAKpB,KAAKoB,IACVC,KAAMrB,KAAKqB,KACXC,OAAQtB,KAAKsB,OACbC,OAAQvB,KAAKuB,OACbC,aAAcxB,KAAKwB,aACnBC,SAAUzB,KAAKyB,SACfhB,OAAQA,IACPiB,OAAOzB,EACZ,GAKI0B,EAAS,MACb9B,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GACvBE,KAAK4B,IAAM,IACX5B,KAAK6B,UAAW,CAClB,CACAxB,SACE,MAAMyB,EAAY9B,KAAK4B,IACvB,OAAQ,IAAAG,GAAED,EAAW,CAAEE,MAAO,CAC1B,MAAQ,EACR,eAAgBhC,KAAK6B,YAClB,IAAAE,GAAE,OAAQ,MACnB,GAEFJ,EAAOM,MAhBW,if","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-format-date_2.entry.js"],"sourcesContent":["import { r as registerInstance, h } from './index-430bb51b.js';\n\nconst ScFormatDate = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The date/time to format. If not set, the current date and time will be used. */\n    this.date = new Date();\n    /** When set, 24 hour time will always be used. */\n    this.hourFormat = 'auto';\n    this.type = 'date';\n  }\n  render() {\n    const dateString = this.type === 'timestamp' ? parseInt(this.date.toString()) * 1000 : this.date;\n    const date = new Date(dateString);\n    const hour12 = this.hourFormat === 'auto' ? undefined : this.hourFormat === '12';\n    // Check for an invalid date\n    if (isNaN(date.getMilliseconds())) {\n      return;\n    }\n    return new Intl.DateTimeFormat(this.locale, {\n      weekday: this.weekday,\n      era: this.era,\n      year: this.year,\n      month: this.month,\n      day: this.day,\n      hour: this.hour,\n      minute: this.minute,\n      second: this.second,\n      timeZoneName: this.timeZoneName,\n      timeZone: this.timeZone,\n      hour12: hour12,\n    }).format(date);\n  }\n};\n\nconst scTextCss = \":host{display:block;--font-size:var(--font-size, var(--sc-font-size-medium));--font-weight:var(--font-size, var(--sc-font-weight-normal));--line-height:var(--font-size, var(--sc-line-height-medium));--text-align:var(--text-align, left);--color:var(--color, inherit)}.text{margin:0;font-size:var(--font-size);font-weight:var(--font-weight);line-height:var(--line-height);text-align:var(--text-align);color:var(--color)}.text.is-truncated{overflow:hidden;text-overflow:ellipsis;white-space:nowrap}\";\n\nconst ScText = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.tag = 'p';\n    this.truncate = false;\n  }\n  render() {\n    const CustomTag = this.tag;\n    return (h(CustomTag, { class: {\n        'text': true,\n        'is-truncated': this.truncate,\n      } }, h(\"slot\", null)));\n  }\n};\nScText.style = scTextCss;\n\nexport { ScFormatDate as sc_format_date, ScText as sc_text };\n"],"names":["ScFormatDate","constructor","hostRef","r","this","date","Date","hourFormat","type","render","dateString","parseInt","toString","hour12","undefined","isNaN","getMilliseconds","Intl","DateTimeFormat","locale","weekday","era","year","month","day","hour","minute","second","timeZoneName","timeZone","format","ScText","tag","truncate","CustomTag","h","class","style"],"sourceRoot":""}