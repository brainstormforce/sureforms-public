{"version":3,"file":"1379.js","mappings":"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","sources":["webpack://sureforms/./node_modules/@surecart/components/dist/esm/index-e534c726.js","webpack://sureforms/./node_modules/@surecart/components/dist/esm/sc-line-items-provider.entry.js"],"sourcesContent":["const convertLineItemsToLineItemData = (lineItems) => {\n  return ((lineItems === null || lineItems === void 0 ? void 0 : lineItems.data) || []).map(item => {\n    return {\n      price_id: item.price.id,\n      quantity: item.quantity,\n    };\n  });\n};\n/**\n * Get price ids from line items\n * @param order\n * @returns\n */\nconst getLineItemPriceIds = (line_items) => {\n  return ((line_items === null || line_items === void 0 ? void 0 : line_items.data) || []).map(item => item.price.id);\n};\n/**\n * Is the price in a checkout session\n */\nconst isPriceInOrder = (price, order) => {\n  const priceIds = getLineItemPriceIds(order === null || order === void 0 ? void 0 : order.line_items);\n  return !!priceIds.find(id => (price === null || price === void 0 ? void 0 : price.id) === id);\n};\n/** Check if the order has a subscription */\nconst hasSubscription = (order) => {\n  var _a, _b, _c;\n  // no line items.\n  if (!((_b = (_a = order === null || order === void 0 ? void 0 : order.line_items) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length))\n    return false;\n  // has subscription product.\n  return (_c = order === null || order === void 0 ? void 0 : order.line_items.data) === null || _c === void 0 ? void 0 : _c.some(item => { var _a; return (_a = item === null || item === void 0 ? void 0 : item.price) === null || _a === void 0 ? void 0 : _a.recurring_interval_count; });\n};\n/** Check if the order has a payment plan. */\nconst hasPaymentPlan = (order) => {\n  var _a;\n  return hasSubscription(order) && ((_a = order === null || order === void 0 ? void 0 : order.line_items.data) === null || _a === void 0 ? void 0 : _a.some(item => { var _a; return (_a = item === null || item === void 0 ? void 0 : item.price) === null || _a === void 0 ? void 0 : _a.recurring_period_count; }));\n};\n\nexport { hasPaymentPlan as a, convertLineItemsToLineItemData as c, hasSubscription as h, isPriceInOrder as i };\n","import { r as registerInstance, c as createEvent, h } from './index-430bb51b.js';\nimport { c as convertLineItemsToLineItemData } from './index-e534c726.js';\n\nconst ScLineItemsProvider = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scUpdateLineItems = createEvent(this, \"scUpdateLineItems\", 7);\n    /** Holds items to sync */\n    this.syncItems = [];\n  }\n  /** Handle line item toggle */\n  handleLineItemToggle(e) {\n    const lineItem = e.detail;\n    this.addSyncItem('toggle', lineItem);\n  }\n  /** Handle line item remove */\n  handleLineItemRemove(e) {\n    const lineItem = e.detail;\n    this.addSyncItem('remove', lineItem);\n  }\n  /** Handle line item add */\n  handleLineItemAdd(e) {\n    const lineItem = e.detail;\n    this.addSyncItem('add', lineItem);\n  }\n  /** Handle line item add */\n  handleLineItemUpdate(e) {\n    const lineItem = e.detail;\n    this.addSyncItem('update', lineItem);\n  }\n  /** We listen to the syncItems array and run it on the next render in batch */\n  async syncItemsHandler(val) {\n    if (!(val === null || val === void 0 ? void 0 : val.length))\n      return;\n    setTimeout(() => {\n      var _a;\n      if (!((_a = this.syncItems) === null || _a === void 0 ? void 0 : _a.length))\n        return;\n      const items = this.processSyncItems();\n      this.scUpdateLineItems.emit(items);\n      this.syncItems = [];\n    }, 100);\n  }\n  /** Add item to sync */\n  addSyncItem(type, payload) {\n    this.syncItems = [...this.syncItems, ...[{ type, payload }]];\n  }\n  /** Batch process items to sync before sending */\n  processSyncItems() {\n    var _a;\n    // get existing line item data.\n    let existingData = convertLineItemsToLineItemData(((_a = this === null || this === void 0 ? void 0 : this.order) === null || _a === void 0 ? void 0 : _a.line_items) || []);\n    const map = {\n      toggle: this.toggleItem,\n      add: this.addItem,\n      remove: this.removeItem,\n      update: this.updateItem,\n    };\n    // run existing data through chain of sync updates.\n    (this.syncItems || []).forEach(item => {\n      existingData = map[item.type](item.payload, existingData);\n    });\n    return existingData;\n  }\n  /** Add item */\n  addItem(item, existingLineData) {\n    return [...existingLineData, ...[item]];\n  }\n  /** Toggle item */\n  toggleItem(item, existingLineData) {\n    var _a;\n    // find existing item.\n    const existingPriceId = (_a = existingLineData.find(line => line.price_id === item.price_id)) === null || _a === void 0 ? void 0 : _a.price_id;\n    // toggle it.\n    existingLineData = existingPriceId ? existingLineData.filter(item => existingPriceId !== item.price_id) : [...existingLineData, ...[item]];\n    // return.\n    return existingLineData;\n  }\n  /** Remove item */\n  removeItem(item, existingLineData) {\n    if (!item.price_id)\n      return existingLineData;\n    return existingLineData.filter(data => data.price_id !== item.price_id);\n  }\n  /** Update the item item */\n  updateItem(item, existingLineData) {\n    // find existing item.\n    const existingLineItem = existingLineData.findIndex(line => line.price_id === item.price_id);\n    // if we found it, update it\n    if (existingLineItem !== -1) {\n      existingLineData[existingLineItem] = item;\n      // otherwise, add it\n    }\n    else {\n      return [...existingLineData, ...[item]];\n    }\n    return existingLineData;\n  }\n  render() {\n    return h(\"slot\", null);\n  }\n  static get watchers() { return {\n    \"syncItems\": [\"syncItemsHandler\"]\n  }; }\n};\n\nexport { ScLineItemsProvider as sc_line_items_provider };\n"],"names":["convertLineItemsToLineItemData","lineItems","data","map","item","price_id","price","id","quantity","isPriceInOrder","order","line_items","find","hasSubscription","_a","_b","_c","length","some","recurring_interval_count","hasPaymentPlan","recurring_period_count","ScLineItemsProvider","constructor","hostRef","r","this","scUpdateLineItems","c","syncItems","handleLineItemToggle","e","lineItem","detail","addSyncItem","handleLineItemRemove","handleLineItemAdd","handleLineItemUpdate","async","val","setTimeout","items","processSyncItems","emit","type","payload","existingData","toggle","toggleItem","add","addItem","remove","removeItem","update","updateItem","forEach","existingLineData","existingPriceId","line","filter","existingLineItem","findIndex","render","h","watchers"],"sourceRoot":""}