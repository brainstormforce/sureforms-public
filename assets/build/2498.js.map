{"version":3,"file":"2498.js","mappings":"+MAEA,MAEMA,EAAgB,MACpBC,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GAEvBE,KAAKC,MAAQ,EAEbD,KAAKE,KAAO,OAEZF,KAAKG,QAAU,OACjB,CACAC,SACE,GAAIC,MAAML,KAAKC,OACb,MAAO,GAET,MAEMK,EAAuB,QAAdN,KAAKE,KAFA,CAAC,GAAI,OAAQ,OAAQ,OAAQ,QAC5B,CAAC,GAAI,OAAQ,OAAQ,OAAQ,OAAQ,QAEpDK,EAAQC,KAAKC,IAAI,EAAGD,KAAKE,IAAIF,KAAKG,MAAMH,KAAKI,MAAMZ,KAAKC,OAAS,GAAIK,EAAOO,OAAS,IACrFX,EAAOI,EAAOC,GAASP,KAAKE,KAC5BY,EAAgBC,YAAYf,KAAKC,MAAQO,KAAKQ,IAAI,IAAMT,IAAQU,YAAY,IAClF,OAAO,IAAIC,KAAKC,aAAanB,KAAKoB,OAAQ,CAAEC,MAAO,OAAQnB,OAAMoB,YAAatB,KAAKG,UAAWoB,OAAOT,EACvG,GAEFlB,EAAcyB,MAzBW,8BA2BzB,MAEMG,EAAY,MAChB3B,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,EACzB,CACAM,SACE,OAAQ,IAAAqB,GAAE,EAAAC,EAAM,MAAM,IAAAD,GAAE,OAAQ,MAClC,GAEFD,EAAUH,MAVW,iF","sources":["webpack://sureforms/./node_modules/@surecart/components/dist/esm/sc-format-bytes_2.entry.js"],"sourcesContent":["import { r as registerInstance, h, H as Host } from './index-430bb51b.js';\n\nconst scFormatBytesCss = \":host{display:inline-block}\";\n\nconst ScFormatBytes = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The number to format in bytes. */\n    this.value = 0;\n    /** The unit to display. */\n    this.unit = 'byte';\n    /** Determines how to display the result, e.g. \"100 bytes\", \"100 b\", or \"100b\". */\n    this.display = 'short';\n  }\n  render() {\n    if (isNaN(this.value)) {\n      return '';\n    }\n    const bitPrefixes = ['', 'kilo', 'mega', 'giga', 'tera']; // petabit isn't a supported unit\n    const bytePrefixes = ['', 'kilo', 'mega', 'giga', 'tera', 'peta'];\n    const prefix = this.unit === 'bit' ? bitPrefixes : bytePrefixes;\n    const index = Math.max(0, Math.min(Math.floor(Math.log10(this.value) / 3), prefix.length - 1));\n    const unit = prefix[index] + this.unit;\n    const valueToFormat = parseFloat((this.value / Math.pow(1000, index)).toPrecision(3));\n    return new Intl.NumberFormat(this.locale, { style: 'unit', unit, unitDisplay: this.display }).format(valueToFormat);\n  }\n};\nScFormatBytes.style = scFormatBytesCss;\n\nconst scSpacingCss = \":host{display:block}::slotted(*:not(:last-child)){margin-bottom:var(--spacing)}\";\n\nconst ScSpacing = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n  render() {\n    return (h(Host, null, h(\"slot\", null)));\n  }\n};\nScSpacing.style = scSpacingCss;\n\nexport { ScFormatBytes as sc_format_bytes, ScSpacing as sc_spacing };\n"],"names":["ScFormatBytes","constructor","hostRef","r","this","value","unit","display","render","isNaN","prefix","index","Math","max","min","floor","log10","length","valueToFormat","parseFloat","pow","toPrecision","Intl","NumberFormat","locale","style","unitDisplay","format","ScSpacing","h","H"],"sourceRoot":""}