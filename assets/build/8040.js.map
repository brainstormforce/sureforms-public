{"version":3,"file":"8040.js","mappings":"0LAGA,MAAMA,EAAiB,MACrBC,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GAEvBE,KAAKC,MAAQ,EAEbD,KAAKE,KAAO,UAEZF,KAAKG,YAAa,EAElBH,KAAKI,SAAW,MAEhBJ,KAAKK,gBAAkB,QACzB,CACAC,SACE,IAAIC,EACJ,GAAIC,MAAMR,KAAKC,OACb,MAAO,GAET,MAAMQ,EAAOC,UAAUC,WAAkC,QAApBJ,EAAKG,iBAA8B,IAAPH,OAAgB,EAASA,EAAGK,mBAAqBF,UAAUG,WAAa,CAAC,OAAO,GACjJ,OAAO,IAAIC,KAAKC,aAAaf,KAAKgB,QAAUP,EAAM,CAChDQ,MAAOjB,KAAKE,KACZE,SAAUJ,KAAKI,SAASc,cACxBb,gBAAiBL,KAAKK,gBACtBc,aAAcnB,KAAKG,WACnBiB,qBAAsBpB,KAAKoB,qBAC3BC,sBAAuBrB,KAAKqB,sBAC5BC,sBAAuBtB,KAAKsB,sBAC5BC,yBAA0BvB,KAAKuB,yBAC/BC,yBAA0BxB,KAAKwB,2BAC9BC,OAAOzB,KAAK0B,UAAY1B,KAAKC,OAAQ,IAAA0B,GAAmB3B,KAAKC,MAAOD,KAAKI,SAASc,eACvF,E,8EClCF,MAAMU,EAAqB,CAACC,EAAQzB,IAC3B0B,EAAc1B,GAAYyB,EAASA,EAAS,IAE/CC,EAAiB1B,IACrB,IAAIG,EACJ,MAAO,CAAC,MAAO,MAAO,MAAO,MAAO,MAAO,MAAO,OAAOwB,SAA6F,QAAnFxB,EAAKH,aAA2C,EAASA,EAAS4B,mBAAgC,IAAPzB,OAAgB,EAASA,EAAG0B,KAAK7B,GAAU,C","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-format-number.entry.js","webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/utils-ceb47050.js"],"sourcesContent":["import { r as registerInstance } from './index-430bb51b.js';\nimport { m as maybeConvertAmount } from './utils-ceb47050.js';\n\nconst ScFormatNumber = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The number to format. */\n    this.value = 0;\n    /** The formatting style to use. */\n    this.type = 'decimal';\n    /** Turns off grouping separators. */\n    this.noGrouping = false;\n    /** The currency to use when formatting. Must be an ISO 4217 currency code such as `USD` or `EUR`. */\n    this.currency = 'USD';\n    /** How to display the currency. */\n    this.currencyDisplay = 'symbol';\n  }\n  render() {\n    var _a;\n    if (isNaN(this.value)) {\n      return '';\n    }\n    const lang = navigator.language || ((_a = navigator) === null || _a === void 0 ? void 0 : _a.browserLanguage) || (navigator.languages || ['en'])[0];\n    return new Intl.NumberFormat(this.locale || lang, {\n      style: this.type,\n      currency: this.currency.toUpperCase(),\n      currencyDisplay: this.currencyDisplay,\n      useGrouping: !this.noGrouping,\n      minimumIntegerDigits: this.minimumIntegerDigits,\n      minimumFractionDigits: this.minimumFractionDigits,\n      maximumFractionDigits: this.maximumFractionDigits,\n      minimumSignificantDigits: this.minimumSignificantDigits,\n      maximumSignificantDigits: this.maximumSignificantDigits,\n    }).format(this.noConvert ? this.value : maybeConvertAmount(this.value, this.currency.toUpperCase()));\n  }\n};\n\nexport { ScFormatNumber as sc_format_number };\n","const maybeConvertAmount = (amount, currency) => {\n  return isZeroDecimal(currency) ? amount : amount / 100;\n};\nconst isZeroDecimal = (currency) => {\n  var _a;\n  return ['bif', 'clp', 'djf', 'gnf', 'jpy', 'kmf', 'krw'].includes((_a = currency === null || currency === void 0 ? void 0 : currency.toLowerCase) === null || _a === void 0 ? void 0 : _a.call(currency));\n};\n\nexport { isZeroDecimal as i, maybeConvertAmount as m };\n"],"names":["ScFormatNumber","constructor","hostRef","r","this","value","type","noGrouping","currency","currencyDisplay","render","_a","isNaN","lang","navigator","language","browserLanguage","languages","Intl","NumberFormat","locale","style","toUpperCase","useGrouping","minimumIntegerDigits","minimumFractionDigits","maximumFractionDigits","minimumSignificantDigits","maximumSignificantDigits","format","noConvert","m","maybeConvertAmount","amount","isZeroDecimal","includes","toLowerCase","call"],"sourceRoot":""}