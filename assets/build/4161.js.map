{"version":3,"file":"4161.js","mappings":"0KAIA,IAAIA,EAAK,EACT,MAAMC,EAAY,MAChBC,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GACvBE,KAAKC,QAAU,cAAaN,EAC5BK,KAAKE,OAAS,qBAAqBP,IACnCK,KAAKG,QAAU,iBAAiBR,IAEhCK,KAAKI,MAAQ,GAEbJ,KAAKK,KAAO,SAEZL,KAAKM,UAAW,EAEhBN,KAAKO,WAAY,EAEjBP,KAAKQ,KAAO,GAEZR,KAAKS,WAAY,EAEjBT,KAAKU,QAAU,EAEfV,KAAKW,aAAe,EACtB,CACAC,mBACEZ,KAAKa,uBACLb,KAAKc,cACP,CACAD,uBACE,MAAME,EAAUf,KAAKgB,GAAGC,iBAAiB,aACrCF,EAAQG,QACVH,EAAQI,SAAQC,IACdA,EAAOd,SAAWN,KAAKM,QAAQ,GAGrC,CACAQ,eAEM,mBAAoBO,QACb,IAAIA,OAAOC,gBAAeC,IACjCA,EAAQJ,SAAQK,IACdxB,KAAKyB,MAAQD,EAAME,YAAYD,KAAK,GACpC,IAEDE,QAAQ3B,KAAKgB,GAEpB,CACAY,SACE,OAAQ,IAAAC,GAAE,WAAY,CAAEC,KAAM,OAAQC,MAAO,CACzC,SAAW,EACX,sBAAuB/B,KAAKS,UAC5B,sBAAuBT,KAAKgC,UAC5B,gBAAiBhC,KAAKyB,MAAQ,IAC9B,gBAAiBzB,KAAKyB,OAAS,KAAOzB,KAAKyB,MAAQ,IACnD,gBAAiBzB,KAAKyB,OAAS,KAAOzB,KAAKyB,MAAQ,IACnD,gBAAiBzB,KAAKyB,OAAS,KAC9BQ,KAAM,eAAgB,IAAAJ,GAAE,kBAAmB,CAAExB,KAAML,KAAKK,KAAMC,SAAUN,KAAKM,SAAUF,MAAOJ,KAAKI,MAAOG,UAAWP,KAAKO,UAAWC,KAAMR,KAAKQ,KAAMP,QAASD,KAAKC,QAASC,OAAQF,KAAKE,OAAQC,QAASH,KAAKG,UAAW,IAAA0B,GAAE,MAAO,CAAEC,KAAM,UAAWC,MAAO,mBAAoB,IAAAF,GAAE,OAAQ,QACnS,CACIb,SAAO,OAAO,IAAAkB,GAAWlC,KAAO,CACzBmC,sBAAa,MAAO,CAC7B,SAAY,CAAC,wBACZ,GAELvC,EAAUwC,MAjEW,suB","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-choices.entry.js"],"sourcesContent":["import { r as registerInstance, h, g as getElement } from './index-430bb51b.js';\n\nconst scChoicesCss = \":host{display:block}.choices ::slotted(div){margin:0;display:flex;flex-wrap:wrap;gap:10px}.choices:not(.choices--auto-width) ::slotted(div){margin:0;display:grid;gap:10px}.breakpoint-lg ::slotted(div),.breakpoint-xl ::slotted(div){grid-template-columns:repeat(var(--columns, 1), 1fr)}.choices .choices__items{margin:0;display:flex;flex-wrap:wrap;gap:10px}.choices:not(.choices--auto-width) .choices__items{display:grid;gap:10px}.choices{border:none;padding:0;margin:0;min-width:0;margin:0}.choices .choices__label{font-family:var(--sc-input-font-family);font-size:var(--sc-input-font-size-medium);font-weight:var(--sc-input-font-weight);color:var(--sc-input-color);padding:0 var(--sc-spacing-xx-small)}.choices__items{display:grid;gap:10px}\";\n\nlet id = 0;\nconst ScChoices = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.inputId = `choices-${++id}`;\n    this.helpId = `choices-help-text-${id}`;\n    this.labelId = `choices-label-${id}`;\n    /** The group label. Required for proper accessibility. Alternatively, you can use the label slot. */\n    this.label = '';\n    /** Input size */\n    this.size = 'medium';\n    /** Required */\n    this.required = false;\n    /** Should we show the label */\n    this.showLabel = true;\n    /** The input's help text. */\n    this.help = '';\n    /** Hides the fieldset and legend that surrounds the group. The label will still be read by screen readers. */\n    this.hideLabel = false;\n    /** Number of columns on desktop */\n    this.columns = 1;\n    /** Validation error message. */\n    this.errorMessage = '';\n  }\n  componentDidLoad() {\n    this.handleRequiredChange();\n    this.handleResize();\n  }\n  handleRequiredChange() {\n    const choices = this.el.querySelectorAll('sc-choice');\n    if (choices.length) {\n      choices.forEach(choice => {\n        choice.required = this.required;\n      });\n    }\n  }\n  handleResize() {\n    // Only run if ResizeObserver is supported.\n    if ('ResizeObserver' in window) {\n      var ro = new window.ResizeObserver(entries => {\n        entries.forEach(entry => {\n          this.width = entry.contentRect.width;\n        });\n      });\n      ro.observe(this.el);\n    }\n  }\n  render() {\n    return (h(\"fieldset\", { part: \"base\", class: {\n        'choices': true,\n        'choices--hide-label': this.hideLabel,\n        'choices--auto-width': this.autoWidth,\n        'breakpoint-sm': this.width < 384,\n        'breakpoint-md': this.width >= 384 && this.width < 576,\n        'breakpoint-lg': this.width >= 576 && this.width < 768,\n        'breakpoint-xl': this.width >= 768,\n      }, role: \"radiogroup\" }, h(\"sc-form-control\", { size: this.size, required: this.required, label: this.label, showLabel: this.showLabel, help: this.help, inputId: this.inputId, helpId: this.helpId, labelId: this.labelId }, h(\"div\", { part: \"choices\", class: \"choices__items\" }, h(\"slot\", null)))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"required\": [\"handleRequiredChange\"]\n  }; }\n};\nScChoices.style = scChoicesCss;\n\nexport { ScChoices as sc_choices };\n"],"names":["id","ScChoices","constructor","hostRef","r","this","inputId","helpId","labelId","label","size","required","showLabel","help","hideLabel","columns","errorMessage","componentDidLoad","handleRequiredChange","handleResize","choices","el","querySelectorAll","length","forEach","choice","window","ResizeObserver","entries","entry","width","contentRect","observe","render","h","part","class","autoWidth","role","g","watchers","style"],"sourceRoot":""}