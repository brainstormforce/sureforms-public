{"version":3,"file":"1479.js","mappings":"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","sources":["webpack://sureforms/./node_modules/@surecart/components/dist/esm/add-query-args-f4c5962b.js","webpack://sureforms/./node_modules/@surecart/components/dist/esm/fetch-d56a3ec0.js"],"sourcesContent":["/**\n * Returns the query string part of the URL.\n *\n * @param {string} url The full URL.\n *\n * @example\n * ```js\n * const queryString = getQueryString( 'http://localhost:8080/this/is/a/test?query=true#fragment' ); // 'query=true'\n * ```\n *\n * @return {string|void} The query string part of the URL.\n */\nfunction getQueryString(url) {\n  let query;\n\n  try {\n    query = new URL(url, 'http://example.com').search.substring(1);\n  } catch (error) {}\n\n  if (query) {\n    return query;\n  }\n}\n\n/**\n * Generates URL-encoded query string using input query data.\n *\n * It is intended to behave equivalent as PHP's `http_build_query`, configured\n * with encoding type PHP_QUERY_RFC3986 (spaces as `%20`).\n *\n * @example\n * ```js\n * const queryString = buildQueryString( {\n *    simple: 'is ok',\n *    arrays: [ 'are', 'fine', 'too' ],\n *    objects: {\n *       evenNested: {\n *          ok: 'yes',\n *       },\n *    },\n * } );\n * // \"simple=is%20ok&arrays%5B0%5D=are&arrays%5B1%5D=fine&arrays%5B2%5D=too&objects%5BevenNested%5D%5Bok%5D=yes\"\n * ```\n *\n * @param {Record<string,*>} data Data to encode.\n *\n * @return {string} Query string.\n */\nfunction buildQueryString(data) {\n  let string = '';\n  const stack = Object.entries(data);\n  let pair;\n\n  while (pair = stack.shift()) {\n    let [key, value] = pair; // Support building deeply nested data, from array or object values.\n\n    const hasNestedData = Array.isArray(value) || value && value.constructor === Object;\n\n    if (hasNestedData) {\n      // Push array or object values onto the stack as composed of their\n      // original key and nested index or key, retaining order by a\n      // combination of Array#reverse and Array#unshift onto the stack.\n      const valuePairs = Object.entries(value).reverse();\n\n      for (const [member, memberValue] of valuePairs) {\n        stack.unshift([`${key}[${member}]`, memberValue]);\n      }\n    } else if (value !== undefined) {\n      // Null is treated as special case, equivalent to empty string.\n      if (value === null) {\n        value = '';\n      }\n\n      string += '&' + [key, value].map(encodeURIComponent).join('=');\n    }\n  } // Loop will concatenate with leading `&`, but it's only expected for all\n  // but the first query parameter. This strips the leading `&`, while still\n  // accounting for the case that the string may in-fact be empty.\n\n\n  return string.substr(1);\n}\n\n/**\n * Internal dependencies\n */\n/** @typedef {import('./get-query-arg').QueryArgParsed} QueryArgParsed */\n\n/**\n * @typedef {Record<string,QueryArgParsed>} QueryArgs\n */\n\n/**\n * Sets a value in object deeply by a given array of path segments. Mutates the\n * object reference.\n *\n * @param {Record<string,*>} object Object in which to assign.\n * @param {string[]}         path   Path segment at which to set value.\n * @param {*}                value  Value to set.\n */\n\nfunction setPath(object, path, value) {\n  const length = path.length;\n  const lastIndex = length - 1;\n\n  for (let i = 0; i < length; i++) {\n    let key = path[i];\n\n    if (!key && Array.isArray(object)) {\n      // If key is empty string and next value is array, derive key from\n      // the current length of the array.\n      key = object.length.toString();\n    } // If the next key in the path is numeric (or empty string), it will be\n    // created as an array. Otherwise, it will be created as an object.\n\n\n    const isNextKeyArrayIndex = !isNaN(Number(path[i + 1]));\n    object[key] = i === lastIndex ? // If at end of path, assign the intended value.\n    value : // Otherwise, advance to the next object in the path, creating\n    // it if it does not yet exist.\n    object[key] || (isNextKeyArrayIndex ? [] : {});\n\n    if (Array.isArray(object[key]) && !isNextKeyArrayIndex) {\n      // If we current key is non-numeric, but the next value is an\n      // array, coerce the value to an object.\n      object[key] = { ...object[key]\n      };\n    } // Update working reference object to the next in the path.\n\n\n    object = object[key];\n  }\n}\n/**\n * Returns an object of query arguments of the given URL. If the given URL is\n * invalid or has no querystring, an empty object is returned.\n *\n * @param {string} url URL.\n *\n * @example\n * ```js\n * const foo = getQueryArgs( 'https://wordpress.org?foo=bar&bar=baz' );\n * // { \"foo\": \"bar\", \"bar\": \"baz\" }\n * ```\n *\n * @return {QueryArgs} Query args object.\n */\n\n\nfunction getQueryArgs(url) {\n  return (getQueryString(url) || '' // Normalize space encoding, accounting for PHP URL encoding\n  // corresponding to `application/x-www-form-urlencoded`.\n  //\n  // See: https://tools.ietf.org/html/rfc1866#section-8.2.1\n  ).replace(/\\+/g, '%20').split('&').reduce((accumulator, keyValue) => {\n    const [key, value = ''] = keyValue.split('=') // Filtering avoids decoding as `undefined` for value, where\n    // default is restored in destructuring assignment.\n    .filter(Boolean).map(decodeURIComponent);\n\n    if (key) {\n      const segments = key.replace(/\\]/g, '').split('[');\n      setPath(accumulator, segments, value);\n    }\n\n    return accumulator;\n  }, {});\n}\n\n/**\n * Internal dependencies\n */\n/**\n * Appends arguments as querystring to the provided URL. If the URL already\n * includes query arguments, the arguments are merged with (and take precedent\n * over) the existing set.\n *\n * @param {string} [url=''] URL to which arguments should be appended. If omitted,\n *                          only the resulting querystring is returned.\n * @param {Object} [args]   Query arguments to apply to URL.\n *\n * @example\n * ```js\n * const newURL = addQueryArgs( 'https://google.com', { q: 'test' } ); // https://google.com/?q=test\n * ```\n *\n * @return {string} URL with arguments applied.\n */\n\nfunction addQueryArgs() {\n  let url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  let args = arguments.length > 1 ? arguments[1] : undefined;\n\n  // If no arguments are to be appended, return original URL.\n  if (!args || !Object.keys(args).length) {\n    return url;\n  }\n\n  let baseUrl = url; // Determine whether URL already had query arguments.\n\n  const queryStringIndex = url.indexOf('?');\n\n  if (queryStringIndex !== -1) {\n    // Merge into existing query arguments.\n    args = Object.assign(getQueryArgs(url), args); // Change working base URL to omit previous query arguments.\n\n    baseUrl = baseUrl.substr(0, queryStringIndex);\n  }\n\n  return baseUrl + '?' + buildQueryString(args);\n}\n\nexport { addQueryArgs as a, buildQueryString as b, getQueryArgs as g };\n","import { _ as __ } from './default-i18n-c67eee5a.js';\nimport { g as getQueryArgs, a as addQueryArgs } from './add-query-args-f4c5962b.js';\n\n/**\n * Internal dependencies\n */\n/**\n * @typedef {{[key: string]: QueryArgParsed}} QueryArgObject\n */\n\n/**\n * @typedef {string|string[]|QueryArgObject} QueryArgParsed\n */\n\n/**\n * Returns a single query argument of the url\n *\n * @param {string} url URL.\n * @param {string} arg Query arg name.\n *\n * @example\n * ```js\n * const foo = getQueryArg( 'https://wordpress.org?foo=bar&bar=baz', 'foo' ); // bar\n * ```\n *\n * @return {QueryArgParsed|void} Query arg value.\n */\n\nfunction getQueryArg(url, arg) {\n  return getQueryArgs(url)[arg];\n}\n\n/**\n * Internal dependencies\n */\n/**\n * Determines whether the URL contains a given query arg.\n *\n * @param {string} url URL.\n * @param {string} arg Query arg name.\n *\n * @example\n * ```js\n * const hasBar = hasQueryArg( 'https://wordpress.org?foo=bar&bar=baz', 'bar' ); // true\n * ```\n *\n * @return {boolean} Whether or not the URL contains the query arg.\n */\n\nfunction hasQueryArg(url, arg) {\n  return getQueryArg(url, arg) !== undefined;\n}\n\n/**\n * Given a path, returns a normalized path where equal query parameter values\n * will be treated as identical, regardless of order they appear in the original\n * text.\n *\n * @param {string} path Original path.\n *\n * @return {string} Normalized path.\n */\nfunction normalizePath(path) {\n  const splitted = path.split('?');\n  const query = splitted[1];\n  const base = splitted[0];\n\n  if (!query) {\n    return base;\n  } // 'b=1&c=2&a=5'\n\n\n  return base + '?' + query // [ 'b=1', 'c=2', 'a=5' ]\n  .split('&') // [ [ 'b, '1' ], [ 'c', '2' ], [ 'a', '5' ] ]\n  .map(entry => entry.split('=')) // [ [ 'a', '5' ], [ 'b, '1' ], [ 'c', '2' ] ]\n  .sort((a, b) => a[0].localeCompare(b[0])) // [ 'a=5', 'b=1', 'c=2' ]\n  .map(pair => pair.join('=')) // 'a=5&b=1&c=2'\n  .join('&');\n}\n\n/**\n * @param {string} nonce\n * @return {import('../types').APIFetchMiddleware & { nonce: string }} A middleware to enhance a request with a nonce.\n */\nfunction createNonceMiddleware(nonce) {\n  /**\n   * @type {import('../types').APIFetchMiddleware & { nonce: string }}\n   */\n  const middleware = (options, next) => {\n    const {\n      headers = {}\n    } = options; // If an 'X-WP-Nonce' header (or any case-insensitive variation\n    // thereof) was specified, no need to add a nonce header.\n\n    for (const headerName in headers) {\n      if (headerName.toLowerCase() === 'x-wp-nonce' && headers[headerName] === middleware.nonce) {\n        return next(options);\n      }\n    }\n\n    return next({ ...options,\n      headers: { ...headers,\n        'X-WP-Nonce': middleware.nonce\n      }\n    });\n  };\n\n  middleware.nonce = nonce;\n  return middleware;\n}\n\n/**\n * @type {import('../types').APIFetchMiddleware}\n */\nconst namespaceAndEndpointMiddleware = (options, next) => {\n  let path = options.path;\n  let namespaceTrimmed, endpointTrimmed;\n\n  if (typeof options.namespace === 'string' && typeof options.endpoint === 'string') {\n    namespaceTrimmed = options.namespace.replace(/^\\/|\\/$/g, '');\n    endpointTrimmed = options.endpoint.replace(/^\\//, '');\n\n    if (endpointTrimmed) {\n      path = namespaceTrimmed + '/' + endpointTrimmed;\n    } else {\n      path = namespaceTrimmed;\n    }\n  }\n\n  delete options.namespace;\n  delete options.endpoint;\n  return next({ ...options,\n    path\n  });\n};\n\n/**\n * Internal dependencies\n */\n/**\n * @param {string} rootURL\n * @return {import('../types').APIFetchMiddleware} Root URL middleware.\n */\n\nconst createRootURLMiddleware = rootURL => (options, next) => {\n  return namespaceAndEndpointMiddleware(options, optionsWithPath => {\n    let url = optionsWithPath.url;\n    let path = optionsWithPath.path;\n    let apiRoot;\n\n    if (typeof path === 'string') {\n      apiRoot = rootURL;\n\n      if (-1 !== rootURL.indexOf('?')) {\n        path = path.replace('?', '&');\n      }\n\n      path = path.replace(/^\\//, ''); // API root may already include query parameter prefix if site is\n      // configured to use plain permalinks.\n\n      if ('string' === typeof apiRoot && -1 !== apiRoot.indexOf('?')) {\n        path = path.replace('?', '&');\n      }\n\n      url = apiRoot + path;\n    }\n\n    return next({ ...optionsWithPath,\n      url\n    });\n  });\n};\n\n/**\n * WordPress dependencies\n */\n/**\n * @param {Record<string, any>} preloadedData\n * @return {import('../types').APIFetchMiddleware} Preloading middleware.\n */\n\nfunction createPreloadingMiddleware(preloadedData) {\n  const cache = Object.keys(preloadedData).reduce((result, path) => {\n    result[normalizePath(path)] = preloadedData[path];\n    return result;\n  },\n  /** @type {Record<string, any>} */\n  {});\n  return (options, next) => {\n    const {\n      parse = true\n    } = options;\n    /** @type {string | void} */\n\n    let rawPath = options.path;\n\n    if (!rawPath && options.url) {\n      const pathFromQuery = getQueryArg(options.url, 'rest_route');\n\n      if (typeof pathFromQuery === 'string') {\n        rawPath = pathFromQuery;\n      }\n    }\n\n    if (typeof rawPath === 'string') {\n      const method = options.method || 'GET';\n      const path = normalizePath(rawPath);\n\n      if ('GET' === method && cache[path]) {\n        const cacheData = cache[path]; // Unsetting the cache key ensures that the data is only used a single time\n\n        delete cache[path];\n        return Promise.resolve(parse ? cacheData.body : new window.Response(JSON.stringify(cacheData.body), {\n          status: 200,\n          statusText: 'OK',\n          headers: cacheData.headers\n        }));\n      } else if ('OPTIONS' === method && cache[method] && cache[method][path]) {\n        const cacheData = cache[method][path]; // Unsetting the cache key ensures that the data is only used a single time\n\n        delete cache[method][path];\n        return Promise.resolve(parse ? cacheData.body : cacheData);\n      }\n    }\n\n    return next(options);\n  };\n}\n\n/**\n * WordPress dependencies\n */\n/**\n * Apply query arguments to both URL and Path, whichever is present.\n *\n * @param {import('../types').APIFetchOptions} props\n * @param {Record<string, string | number>}    queryArgs\n * @return {import('../types').APIFetchOptions} The request with the modified query args\n */\n\nconst modifyQuery = (_ref, queryArgs) => {\n  let {\n    path,\n    url,\n    ...options\n  } = _ref;\n  return { ...options,\n    url: url && addQueryArgs(url, queryArgs),\n    path: path && addQueryArgs(path, queryArgs)\n  };\n};\n/**\n * Duplicates parsing functionality from apiFetch.\n *\n * @param {Response} response\n * @return {Promise<any>} Parsed response json.\n */\n\n\nconst parseResponse$1 = response => response.json ? response.json() : Promise.reject(response);\n/**\n * @param {string | null} linkHeader\n * @return {{ next?: string }} The parsed link header.\n */\n\n\nconst parseLinkHeader = linkHeader => {\n  if (!linkHeader) {\n    return {};\n  }\n\n  const match = linkHeader.match(/<([^>]+)>; rel=\"next\"/);\n  return match ? {\n    next: match[1]\n  } : {};\n};\n/**\n * @param {Response} response\n * @return {string | undefined} The next page URL.\n */\n\n\nconst getNextPageUrl = response => {\n  const {\n    next\n  } = parseLinkHeader(response.headers.get('link'));\n  return next;\n};\n/**\n * @param {import('../types').APIFetchOptions} options\n * @return {boolean} True if the request contains an unbounded query.\n */\n\n\nconst requestContainsUnboundedQuery = options => {\n  const pathIsUnbounded = !!options.path && options.path.indexOf('per_page=-1') !== -1;\n  const urlIsUnbounded = !!options.url && options.url.indexOf('per_page=-1') !== -1;\n  return pathIsUnbounded || urlIsUnbounded;\n};\n/**\n * The REST API enforces an upper limit on the per_page option. To handle large\n * collections, apiFetch consumers can pass `per_page=-1`; this middleware will\n * then recursively assemble a full response array from all available pages.\n *\n * @type {import('../types').APIFetchMiddleware}\n */\n\n\nconst fetchAllMiddleware = async (options, next) => {\n  if (options.parse === false) {\n    // If a consumer has opted out of parsing, do not apply middleware.\n    return next(options);\n  }\n\n  if (!requestContainsUnboundedQuery(options)) {\n    // If neither url nor path is requesting all items, do not apply middleware.\n    return next(options);\n  } // Retrieve requested page of results.\n\n\n  const response = await apiFetch({ ...modifyQuery(options, {\n      per_page: 100\n    }),\n    // Ensure headers are returned for page 1.\n    parse: false\n  });\n  const results = await parseResponse$1(response);\n\n  if (!Array.isArray(results)) {\n    // We have no reliable way of merging non-array results.\n    return results;\n  }\n\n  let nextPage = getNextPageUrl(response);\n\n  if (!nextPage) {\n    // There are no further pages to request.\n    return results;\n  } // Iteratively fetch all remaining pages until no \"next\" header is found.\n\n\n  let mergedResults =\n  /** @type {any[]} */\n  [].concat(results);\n\n  while (nextPage) {\n    const nextResponse = await apiFetch({ ...options,\n      // Ensure the URL for the next page is used instead of any provided path.\n      path: undefined,\n      url: nextPage,\n      // Ensure we still get headers so we can identify the next page.\n      parse: false\n    });\n    const nextResults = await parseResponse$1(nextResponse);\n    mergedResults = mergedResults.concat(nextResults);\n    nextPage = getNextPageUrl(nextResponse);\n  }\n\n  return mergedResults;\n};\n\n/**\n * Set of HTTP methods which are eligible to be overridden.\n *\n * @type {Set<string>}\n */\nconst OVERRIDE_METHODS = new Set(['PATCH', 'PUT', 'DELETE']);\n/**\n * Default request method.\n *\n * \"A request has an associated method (a method). Unless stated otherwise it\n * is `GET`.\"\n *\n * @see  https://fetch.spec.whatwg.org/#requests\n *\n * @type {string}\n */\n\nconst DEFAULT_METHOD = 'GET';\n/**\n * API Fetch middleware which overrides the request method for HTTP v1\n * compatibility leveraging the REST API X-HTTP-Method-Override header.\n *\n * @type {import('../types').APIFetchMiddleware}\n */\n\nconst httpV1Middleware = (options, next) => {\n  const {\n    method = DEFAULT_METHOD\n  } = options;\n\n  if (OVERRIDE_METHODS.has(method.toUpperCase())) {\n    options = { ...options,\n      headers: { ...options.headers,\n        'X-HTTP-Method-Override': method,\n        'Content-Type': 'application/json'\n      },\n      method: 'POST'\n    };\n  }\n\n  return next(options);\n};\n\n/**\n * WordPress dependencies\n */\n/**\n * @type {import('../types').APIFetchMiddleware}\n */\n\nconst userLocaleMiddleware = (options, next) => {\n  if (typeof options.url === 'string' && !hasQueryArg(options.url, '_locale')) {\n    options.url = addQueryArgs(options.url, {\n      _locale: 'user'\n    });\n  }\n\n  if (typeof options.path === 'string' && !hasQueryArg(options.path, '_locale')) {\n    options.path = addQueryArgs(options.path, {\n      _locale: 'user'\n    });\n  }\n\n  return next(options);\n};\n\n/**\n * WordPress dependencies\n */\n/**\n * Parses the apiFetch response.\n *\n * @param {Response} response\n * @param {boolean}  shouldParseResponse\n *\n * @return {Promise<any> | null | Response} Parsed response.\n */\n\nconst parseResponse = function (response) {\n  let shouldParseResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (shouldParseResponse) {\n    if (response.status === 204) {\n      return null;\n    }\n\n    return response.json ? response.json() : Promise.reject(response);\n  }\n\n  return response;\n};\n/**\n * Calls the `json` function on the Response, throwing an error if the response\n * doesn't have a json function or if parsing the json itself fails.\n *\n * @param {Response} response\n * @return {Promise<any>} Parsed response.\n */\n\n\nconst parseJsonAndNormalizeError = response => {\n  const invalidJsonError = {\n    code: 'invalid_json',\n    message: __('The response is not a valid JSON response.')\n  };\n\n  if (!response || !response.json) {\n    throw invalidJsonError;\n  }\n\n  return response.json().catch(() => {\n    throw invalidJsonError;\n  });\n};\n/**\n * Parses the apiFetch response properly and normalize response errors.\n *\n * @param {Response} response\n * @param {boolean}  shouldParseResponse\n *\n * @return {Promise<any>} Parsed response.\n */\n\n\nconst parseResponseAndNormalizeError = function (response) {\n  let shouldParseResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  return Promise.resolve(parseResponse(response, shouldParseResponse)).catch(res => parseAndThrowError(res, shouldParseResponse));\n};\n/**\n * Parses a response, throwing an error if parsing the response fails.\n *\n * @param {Response} response\n * @param {boolean}  shouldParseResponse\n * @return {Promise<any>} Parsed response.\n */\n\nfunction parseAndThrowError(response) {\n  let shouldParseResponse = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n\n  if (!shouldParseResponse) {\n    throw response;\n  }\n\n  return parseJsonAndNormalizeError(response).then(error => {\n    const unknownError = {\n      code: 'unknown_error',\n      message: __('An unknown error occurred.')\n    };\n    throw error || unknownError;\n  });\n}\n\n/**\n * WordPress dependencies\n */\n/**\n * @param {import('../types').APIFetchOptions} options\n * @return {boolean} True if the request is for media upload.\n */\n\nfunction isMediaUploadRequest(options) {\n  const isCreateMethod = !!options.method && options.method === 'POST';\n  const isMediaEndpoint = !!options.path && options.path.indexOf('/wp/v2/media') !== -1 || !!options.url && options.url.indexOf('/wp/v2/media') !== -1;\n  return isMediaEndpoint && isCreateMethod;\n}\n/**\n * Middleware handling media upload failures and retries.\n *\n * @type {import('../types').APIFetchMiddleware}\n */\n\n\nconst mediaUploadMiddleware = (options, next) => {\n  if (!isMediaUploadRequest(options)) {\n    return next(options);\n  }\n\n  let retries = 0;\n  const maxRetries = 5;\n  /**\n   * @param {string} attachmentId\n   * @return {Promise<any>} Processed post response.\n   */\n\n  const postProcess = attachmentId => {\n    retries++;\n    return next({\n      path: `/wp/v2/media/${attachmentId}/post-process`,\n      method: 'POST',\n      data: {\n        action: 'create-image-subsizes'\n      },\n      parse: false\n    }).catch(() => {\n      if (retries < maxRetries) {\n        return postProcess(attachmentId);\n      }\n\n      next({\n        path: `/wp/v2/media/${attachmentId}?force=true`,\n        method: 'DELETE'\n      });\n      return Promise.reject();\n    });\n  };\n\n  return next({ ...options,\n    parse: false\n  }).catch(response => {\n    const attachmentId = response.headers.get('x-wp-upload-attachment-id');\n\n    if (response.status >= 500 && response.status < 600 && attachmentId) {\n      return postProcess(attachmentId).catch(() => {\n        if (options.parse !== false) {\n          return Promise.reject({\n            code: 'post_process',\n            message: __('Media upload failed. If this is a photo or a large image, please scale it down and try again.')\n          });\n        }\n\n        return Promise.reject(response);\n      });\n    }\n\n    return parseAndThrowError(response, options.parse);\n  }).then(response => parseResponseAndNormalizeError(response, options.parse));\n};\n\n/**\n * WordPress dependencies\n */\n/**\n * Default set of header values which should be sent with every request unless\n * explicitly provided through apiFetch options.\n *\n * @type {Record<string, string>}\n */\n\nconst DEFAULT_HEADERS = {\n  // The backend uses the Accept header as a condition for considering an\n  // incoming request as a REST request.\n  //\n  // See: https://core.trac.wordpress.org/ticket/44534\n  Accept: 'application/json, */*;q=0.1'\n};\n/**\n * Default set of fetch option values which should be sent with every request\n * unless explicitly provided through apiFetch options.\n *\n * @type {Object}\n */\n\nconst DEFAULT_OPTIONS = {\n  credentials: 'include'\n};\n/** @typedef {import('./types').APIFetchMiddleware} APIFetchMiddleware */\n\n/** @typedef {import('./types').APIFetchOptions} APIFetchOptions */\n\n/**\n * @type {import('./types').APIFetchMiddleware[]}\n */\n\nconst middlewares = [userLocaleMiddleware, namespaceAndEndpointMiddleware, httpV1Middleware, fetchAllMiddleware];\n/**\n * Register a middleware\n *\n * @param {import('./types').APIFetchMiddleware} middleware\n */\n\nfunction registerMiddleware(middleware) {\n  middlewares.unshift(middleware);\n}\n/**\n * Checks the status of a response, throwing the Response as an error if\n * it is outside the 200 range.\n *\n * @param {Response} response\n * @return {Response} The response if the status is in the 200 range.\n */\n\n\nconst checkStatus = response => {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  }\n\n  throw response;\n};\n/** @typedef {(options: import('./types').APIFetchOptions) => Promise<any>} FetchHandler*/\n\n/**\n * @type {FetchHandler}\n */\n\n\nconst defaultFetchHandler = nextOptions => {\n  const {\n    url,\n    path,\n    data,\n    parse = true,\n    ...remainingOptions\n  } = nextOptions;\n  let {\n    body,\n    headers\n  } = nextOptions; // Merge explicitly-provided headers with default values.\n\n  headers = { ...DEFAULT_HEADERS,\n    ...headers\n  }; // The `data` property is a shorthand for sending a JSON body.\n\n  if (data) {\n    body = JSON.stringify(data);\n    headers['Content-Type'] = 'application/json';\n  }\n\n  const responsePromise = window.fetch( // fall back to explicitly passing `window.location` which is the behavior if `undefined` is passed\n  url || path || window.location.href, { ...DEFAULT_OPTIONS,\n    ...remainingOptions,\n    body,\n    headers\n  });\n  return responsePromise.then(value => Promise.resolve(value).then(checkStatus).catch(response => parseAndThrowError(response, parse)).then(response => parseResponseAndNormalizeError(response, parse)), err => {\n    // Re-throw AbortError for the users to handle it themselves.\n    if (err && err.name === 'AbortError') {\n      throw err;\n    } // Otherwise, there is most likely no network connection.\n    // Unfortunately the message might depend on the browser.\n\n\n    throw {\n      code: 'fetch_error',\n      message: __('You are probably offline.')\n    };\n  });\n};\n/** @type {FetchHandler} */\n\n\nlet fetchHandler = defaultFetchHandler;\n/**\n * Defines a custom fetch handler for making the requests that will override\n * the default one using window.fetch\n *\n * @param {FetchHandler} newFetchHandler The new fetch handler\n */\n\nfunction setFetchHandler(newFetchHandler) {\n  fetchHandler = newFetchHandler;\n}\n/**\n * @template T\n * @param {import('./types').APIFetchOptions} options\n * @return {Promise<T>} A promise representing the request processed via the registered middlewares.\n */\n\n\nfunction apiFetch(options) {\n  // creates a nested function chain that calls all middlewares and finally the `fetchHandler`,\n  // converting `middlewares = [ m1, m2, m3 ]` into:\n  // ```\n  // opts1 => m1( opts1, opts2 => m2( opts2, opts3 => m3( opts3, fetchHandler ) ) );\n  // ```\n  const enhancedHandler = middlewares.reduceRight((\n  /** @type {FetchHandler} */\n  next, middleware) => {\n    return workingOptions => middleware(workingOptions, next);\n  }, fetchHandler);\n  return enhancedHandler(options).catch(error => {\n    if (error.code !== 'rest_cookie_invalid_nonce') {\n      return Promise.reject(error);\n    } // If the nonce is invalid, refresh it and try again.\n\n\n    return window // @ts-ignore\n    .fetch(apiFetch.nonceEndpoint).then(checkStatus).then(data => data.text()).then(text => {\n      // @ts-ignore\n      apiFetch.nonceMiddleware.nonce = text;\n      return apiFetch(options);\n    });\n  });\n}\n\napiFetch.use = registerMiddleware;\napiFetch.setFetchHandler = setFetchHandler;\napiFetch.createNonceMiddleware = createNonceMiddleware;\napiFetch.createPreloadingMiddleware = createPreloadingMiddleware;\napiFetch.createRootURLMiddleware = createRootURLMiddleware;\napiFetch.fetchAllMiddleware = fetchAllMiddleware;\napiFetch.mediaUploadMiddleware = mediaUploadMiddleware;\n\nvar _a, _b, _c;\nif (window === null || window === void 0 ? void 0 : window.scData) {\n  apiFetch.use(apiFetch.createRootURLMiddleware((_a = window === null || window === void 0 ? void 0 : window.scData) === null || _a === void 0 ? void 0 : _a.root_url));\n  // @ts-ignore\n  apiFetch.nonceMiddleware = apiFetch.createNonceMiddleware((_b = window === null || window === void 0 ? void 0 : window.scData) === null || _b === void 0 ? void 0 : _b.nonce);\n  // @ts-ignore\n  apiFetch.use(apiFetch.nonceMiddleware);\n  // @ts-ignore\n  apiFetch.nonceEndpoint = (_c = window === null || window === void 0 ? void 0 : window.scData) === null || _c === void 0 ? void 0 : _c.nonce_endpoint;\n}\n\nexport { apiFetch as a, getQueryArg as g };\n"],"names":["buildQueryString","data","string","stack","Object","entries","pair","shift","key","value","Array","isArray","constructor","valuePairs","reverse","member","memberValue","unshift","undefined","map","encodeURIComponent","join","substr","getQueryArgs","url","query","URL","search","substring","error","getQueryString","replace","split","reduce","accumulator","keyValue","filter","Boolean","decodeURIComponent","object","path","length","lastIndex","i","toString","isNextKeyArrayIndex","isNaN","Number","setPath","addQueryArgs","arguments","args","keys","baseUrl","queryStringIndex","indexOf","assign","getQueryArg","arg","g","hasQueryArg","normalizePath","splitted","base","entry","sort","a","b","localeCompare","namespaceAndEndpointMiddleware","options","next","namespaceTrimmed","endpointTrimmed","namespace","endpoint","modifyQuery","_ref","queryArgs","parseResponse$1","response","json","Promise","reject","getNextPageUrl","linkHeader","match","parseLinkHeader","headers","get","fetchAllMiddleware","async","parse","pathIsUnbounded","urlIsUnbounded","requestContainsUnboundedQuery","apiFetch","per_page","results","nextPage","mergedResults","concat","nextResponse","nextResults","OVERRIDE_METHODS","Set","DEFAULT_METHOD","parseResponse","status","parseJsonAndNormalizeError","invalidJsonError","code","message","_","catch","parseResponseAndNormalizeError","shouldParseResponse","resolve","res","parseAndThrowError","then","unknownError","DEFAULT_HEADERS","Accept","DEFAULT_OPTIONS","credentials","middlewares","_locale","method","has","toUpperCase","checkStatus","fetchHandler","nextOptions","remainingOptions","body","JSON","stringify","window","fetch","location","href","err","name","reduceRight","middleware","workingOptions","enhancedHandler","nonceEndpoint","text","nonceMiddleware","nonce","_a","_b","_c","use","setFetchHandler","newFetchHandler","createNonceMiddleware","headerName","toLowerCase","createPreloadingMiddleware","preloadedData","cache","result","rawPath","pathFromQuery","cacheData","Response","statusText","createRootURLMiddleware","rootURL","optionsWithPath","apiRoot","mediaUploadMiddleware","isCreateMethod","isMediaUploadRequest","retries","postProcess","attachmentId","action","scData","root_url","nonce_endpoint"],"sourceRoot":""}