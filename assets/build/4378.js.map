{"version":3,"file":"4378.js","mappings":"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","sources":["webpack://sureforms/./node_modules/@surecart/components/dist/esm/sc-textarea.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-430bb51b.js';\n\nconst scTextareaCss = \":host{display:block}.textarea{display:flex;align-items:center;position:relative;width:100%;font-family:var(--sc-input-font-family);font-weight:var(--sc-input-font-weight);line-height:var(--sc-line-height-normal);letter-spacing:var(--sc-input-letter-spacing);vertical-align:middle;transition:var(--sc-transition-fast) color, var(--sc-transition-fast) border, var(--sc-transition-fast) box-shadow,\\n    var(--sc-transition-fast) background-color;cursor:text}.textarea--standard{background-color:var(--sc-input-background-color);border:solid var(--sc-input-border-width) var(--sc-input-border-color)}.textarea--standard:hover:not(.textarea--disabled){background-color:var(--sc-input-background-color-hover);border-color:var(--sc-input-border-color-hover)}.textarea--standard:hover:not(.textarea--disabled) .textarea__control{color:var(--sc-input-color-hover)}.textarea--standard.textarea--focused:not(.textarea--disabled){background-color:var(--sc-input-background-color-focus);border-color:var(--sc-input-border-color-focus);color:var(--sc-input-color-focus);box-shadow:0 0 0 var(--sc-focus-ring-width) var(--sc-input-focus-ring-color)}.textarea--standard.textarea--focused:not(.textarea--disabled) .textarea__control{color:var(--sc-input-color-focus)}.textarea--standard.textarea--disabled{background-color:var(--sc-input-background-color-disabled);border-color:var(--sc-input-border-color-disabled);opacity:0.5;cursor:not-allowed}.textarea--standard.textarea--disabled .textarea__control{color:var(--sc-input-color-disabled)}.textarea--standard.textarea--disabled .textarea__control::placeholder{color:var(--sc-input-placeholder-color-disabled)}.textarea--filled{border:none;background-color:var(--sc-input-filled-background-color);color:var(--sc-input-color)}.textarea--filled:hover:not(.textarea--disabled){background-color:var(--sc-input-filled-background-color-hover)}.textarea--filled.textarea--focused:not(.textarea--disabled){background-color:var(--sc-input-filled-background-color-focus);outline:var(--sc-focus-ring);outline-offset:var(--sc-focus-ring-offset)}.textarea--filled.textarea--disabled{background-color:var(--sc-input-filled-background-color-disabled);opacity:0.5;cursor:not-allowed}.textarea__control{flex:1 1 auto;font-family:inherit;font-size:inherit;font-weight:inherit;line-height:1.4;color:var(--sc-input-color);border:none;background:none;box-shadow:none;cursor:inherit;-webkit-appearance:none}.textarea__control::-webkit-search-decoration,.textarea__control::-webkit-search-cancel-button,.textarea__control::-webkit-search-results-button,.textarea__control::-webkit-search-results-decoration{-webkit-appearance:none}.textarea__control::placeholder{color:var(--sc-input-placeholder-color);user-select:none}.textarea__control:focus{outline:none}.textarea--small{border-radius:var(--sc-input-border-radius-small);font-size:var(--sc-input-font-size-small)}.textarea--small .textarea__control{padding:0.5em var(--sc-input-spacing-small)}.textarea--medium{border-radius:var(--sc-input-border-radius-medium);font-size:var(--sc-input-font-size-medium)}.textarea--medium .textarea__control{padding:0.5em var(--sc-input-spacing-medium)}.textarea--large{border-radius:var(--sc-input-border-radius-large);font-size:var(--sc-input-font-size-large)}.textarea--large .textarea__control{padding:0.5em var(--sc-input-spacing-large)}.textarea--resize-none .textarea__control{resize:none}.textarea--resize-vertical .textarea__control{resize:vertical}.textarea--resize-auto .textarea__control{height:auto;resize:none}\";\n\nlet id = 0;\nconst ScTextarea = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scChange = createEvent(this, \"scChange\", 7);\n    this.scInput = createEvent(this, \"scInput\", 7);\n    this.scBlur = createEvent(this, \"scBlur\", 7);\n    this.scFocus = createEvent(this, \"scFocus\", 7);\n    this.inputId = `textarea-${++id}`;\n    this.helpId = `textarea-help-text-${id}`;\n    this.labelId = `textarea-label-${id}`;\n    this.hasFocus = false;\n    /** The textarea's size. */\n    this.size = 'medium';\n    /** The textarea's value attribute. */\n    this.value = '';\n    /** Draws a filled textarea. */\n    this.filled = false;\n    /** The textarea's label. Alternatively, you can use the label slot. */\n    this.label = '';\n    /** Should we show the label */\n    this.showLabel = true;\n    /** The textarea's help text. Alternatively, you can use the help-text slot. */\n    this.help = '';\n    /** The number of rows to display by default. */\n    this.rows = 4;\n    /** Controls how the textarea can be resized. */\n    this.resize = 'vertical';\n    /** Disables the textarea. */\n    this.disabled = false;\n    /** Makes the textarea readonly. */\n    this.readonly = false;\n    /** Makes the textarea a required field. */\n    this.required = false;\n    /**\n     * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n     * `required`, `minlength`, and `maxlength` using the browser's constraint validation API.\n     */\n    this.invalid = false;\n  }\n  handleRowsChange() {\n    this.setTextareaHeight();\n  }\n  handleValueChange() {\n    this.invalid = !this.input.checkValidity();\n  }\n  handleDisabledChange() {\n    // Disabled form controls are always valid, so we need to recheck validity when the state changes\n    this.input.disabled = this.disabled;\n    this.invalid = !this.input.checkValidity();\n  }\n  disconnectedCallback() {\n    this.resizeObserver.unobserve(this.input);\n  }\n  /** Sets focus on the textarea. */\n  focus(options) {\n    this.input.focus(options);\n  }\n  /** Removes focus from the textarea. */\n  blur() {\n    this.input.blur();\n  }\n  /** Selects all the text in the textarea. */\n  select() {\n    this.input.select();\n  }\n  /** Gets or sets the textarea's scroll position. */\n  scrollPosition(position) {\n    if (position) {\n      if (typeof position.top === 'number')\n        this.input.scrollTop = position.top;\n      if (typeof position.left === 'number')\n        this.input.scrollLeft = position.left;\n      return;\n    }\n    // eslint-disable-next-line consistent-return\n    return {\n      top: this.input.scrollTop,\n      left: this.input.scrollTop,\n    };\n  }\n  /** Sets the start and end positions of the text selection (0-based). */\n  setSelectionRange(selectionStart, selectionEnd, selectionDirection = 'none') {\n    this.input.setSelectionRange(selectionStart, selectionEnd, selectionDirection);\n  }\n  /** Replaces a range of text with a new string. */\n  setRangeText(replacement, start, end, selectMode = 'preserve') {\n    this.input.setRangeText(replacement, start, end, selectMode);\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n      this.scInput.emit();\n    }\n    if (this.value !== this.input.value) {\n      this.value = this.input.value;\n      this.setTextareaHeight();\n      this.scInput.emit();\n      this.scChange.emit();\n    }\n  }\n  /** Checks for validity and shows the browser's validation message if the control is invalid. */\n  reportValidity() {\n    return this.input.reportValidity();\n  }\n  /** Sets a custom validation message. If `message` is not empty, the field will be considered invalid. */\n  setCustomValidity(message) {\n    this.input.setCustomValidity(message);\n    this.invalid = !this.input.checkValidity();\n  }\n  handleBlur() {\n    this.hasFocus = false;\n    this.scBlur.emit();\n  }\n  handleChange() {\n    this.value = this.input.value;\n    this.setTextareaHeight();\n    this.scChange.emit();\n  }\n  handleFocus() {\n    this.hasFocus = true;\n    this.scFocus.emit();\n  }\n  handleInput() {\n    this.value = this.input.value;\n    this.setTextareaHeight();\n    this.scInput.emit();\n  }\n  componentWillLoad() {\n    if (!(window === null || window === void 0 ? void 0 : window.ResizeObserver)) {\n      return;\n    }\n    this.resizeObserver = new window.ResizeObserver(() => this.setTextareaHeight());\n  }\n  componentDidLoad() {\n    if (!(window === null || window === void 0 ? void 0 : window.ResizeObserver)) {\n      return;\n    }\n    this.resizeObserver.observe(this.input);\n  }\n  setTextareaHeight() {\n    if (this.resize === 'auto') {\n      this.input.style.height = 'auto';\n      this.input.style.height = `${this.input.scrollHeight}px`;\n    }\n    else {\n      this.input.style.height = undefined;\n    }\n  }\n  render() {\n    return (h(\"div\", { part: \"form-control\", class: {\n        'form-control': true,\n        'form-control--small': this.size === 'small',\n        'form-control--medium': this.size === 'medium',\n        'form-control--large': this.size === 'large',\n      } }, h(\"sc-form-control\", { size: this.size, required: this.required, label: this.label, showLabel: this.showLabel, help: this.help, inputId: this.inputId, helpId: this.helpId, labelId: this.labelId, name: this.name }, h(\"div\", { part: \"form-control-input\", class: \"form-control-input\" }, h(\"div\", { part: \"base\", class: {\n        'textarea': true,\n        'textarea--small': this.size === 'small',\n        'textarea--medium': this.size === 'medium',\n        'textarea--large': this.size === 'large',\n        'textarea--standard': !this.filled,\n        'textarea--filled': this.filled,\n        'textarea--disabled': this.disabled,\n        'textarea--focused': this.hasFocus,\n        'textarea--empty': !this.value,\n        'textarea--invalid': this.invalid,\n        'textarea--resize-none': this.resize === 'none',\n        'textarea--resize-vertical': this.resize === 'vertical',\n        'textarea--resize-auto': this.resize === 'auto',\n      } }, h(\"textarea\", { part: \"textarea\", ref: el => (this.input = el), id: \"input\", class: \"textarea__control\", name: this.name, value: this.value, disabled: this.disabled, readonly: this.readonly, required: this.required, placeholder: this.placeholder, rows: this.rows, minlength: this.minlength, maxlength: this.maxlength, autocapitalize: this.autocapitalize, autocorrect: this.autocorrect, autofocus: this.autofocus, spellcheck: this.spellcheck, enterkeyhint: this.enterkeyhint, inputmode: this.inputmode, \"aria-describedby\": \"help-text\", onChange: () => this.handleChange(), onInput: () => this.handleInput(), onFocus: () => this.handleFocus(), onBlur: () => this.handleBlur() }))))));\n  }\n  get el() { return getElement(this); }\n  static get watchers() { return {\n    \"rows\": [\"handleRowsChange\"],\n    \"value\": [\"handleValueChange\"],\n    \"disabled\": [\"handleDisabledChange\"]\n  }; }\n};\nScTextarea.style = scTextareaCss;\n\nexport { ScTextarea as sc_textarea };\n"],"names":["id","ScTextarea","constructor","hostRef","r","this","scChange","c","scInput","scBlur","scFocus","inputId","helpId","labelId","hasFocus","size","value","filled","label","showLabel","help","rows","resize","disabled","readonly","required","invalid","handleRowsChange","setTextareaHeight","handleValueChange","input","checkValidity","handleDisabledChange","disconnectedCallback","resizeObserver","unobserve","focus","options","blur","select","scrollPosition","position","top","scrollTop","left","scrollLeft","setSelectionRange","selectionStart","selectionEnd","selectionDirection","setRangeText","replacement","start","end","selectMode","emit","reportValidity","setCustomValidity","message","handleBlur","handleChange","handleFocus","handleInput","componentWillLoad","window","ResizeObserver","componentDidLoad","observe","style","height","scrollHeight","undefined","render","h","part","class","name","ref","el","placeholder","minlength","maxlength","autocapitalize","autocorrect","autofocus","spellcheck","enterkeyhint","inputmode","onChange","onInput","onFocus","onBlur","g","watchers"],"sourceRoot":""}