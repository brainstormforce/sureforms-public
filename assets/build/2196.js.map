{"version":3,"file":"2196.js","mappings":"uKAMA,SAASA,EAAUC,GACjB,MAAMC,EAAW,IAAIC,SAASF,GACxBG,EAAS,CAAC,EAIhB,OAHAF,EAASG,SAAQ,CAACC,EAAOC,KACvBH,EAAOG,GAAOD,CAAK,IAEdF,CACT,CAEA,MAEMI,EAAS,MACbC,YAAYC,IACV,IAAAC,GAAiBC,KAAMF,GACvBE,KAAKC,UAAW,IAAAC,GAAYF,KAAM,WAAY,GAC9CA,KAAKG,cAAe,IAAAD,GAAYF,KAAM,eAAgB,GACtDA,KAAKI,cAAe,IAAAF,GAAYF,KAAM,eAAgB,GAEtDA,KAAKK,YAAa,CACpB,CAEAC,oBACE,OAAO,IAAIf,SAASS,KAAKO,YAC3B,CACAD,oBACE,OAAOlB,EAAUY,KAAKO,YACxB,CACAD,qBACEN,KAAKI,aAAaI,KAAKpB,EAAUY,KAAKO,aACxC,CACAD,eACE,OAAON,KAAKS,YACd,CAEAC,kBACE,MAAO,IAAIV,KAAKX,KAAKsB,iBAAiB,KACxC,CACAL,iBACE,MACMM,EADeZ,KAAKU,kBACkBG,QAAQC,GAAoC,mBAAtBA,EAAGC,iBACrE,IAAKf,KAAKK,WACR,IAAK,MAAMS,KAAMF,EAEf,UADsBE,EAAGC,iBAEvB,OAAO,EAIb,OAAO,CACT,CACAN,aAGE,MAAMO,EAASC,SAASC,cAAc,UAClClB,KAAKO,cACPS,EAAOG,KAAO,SACdH,EAAOI,MAAMC,SAAW,WACxBL,EAAOI,MAAME,MAAQ,IACrBN,EAAOI,MAAMG,OAAS,IACtBP,EAAOI,MAAMI,KAAO,gBACpBR,EAAOI,MAAMK,SAAW,aACxBT,EAAOI,MAAMM,SAAW,SACxBV,EAAOI,MAAMO,WAAa,SAC1B3B,KAAKO,YAAYqB,OAAOZ,GACxBA,EAAOa,QACPb,EAAOc,SAEX,CACAC,SACE,OAAQ,IAAAC,GAAE,MAAO,CAAEC,KAAM,OAAQC,MAAO,OAAQC,KAAM,SAAU,IAAAH,GAAE,OAAQ,CAAEI,IAAKtB,GAAOd,KAAKO,YAAcO,EAAKuB,SAAU/B,MAAOgC,IAG7H,GAFAA,EAAEC,wBACoBvC,KAAKwC,WAEzB,OAAO,EAETxC,KAAKC,SAASO,OACdR,KAAKG,aAAaK,MAAM,EACvBH,WAAYL,KAAKK,aAAc,IAAA2B,GAAE,OAAQ,OAChD,CACI3C,WAAS,OAAO,IAAAoD,GAAWzC,KAAO,GAExCJ,EAAOwB,MAxEW,gU","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-form.entry.js"],"sourcesContent":["import { r as registerInstance, c as createEvent, h, g as getElement } from './index-430bb51b.js';\n\n/**\n * Serializes a form and returns a plain object. If a form control with the same name appears more than once, the\n * property will be converted to an array.\n */\nfunction serialize(form) {\n  const formData = new FormData(form);\n  const object = {};\n  formData.forEach((value, key) => {\n    object[key] = value;\n  });\n  return object;\n}\n\nconst scFormCss = \"sc-form{display:block}:host{display:block}::slotted(*:not(:last-child)),sc-form form>*:not(:last-child){margin-bottom:var(--sc-form-row-spacing, 0.75em)}::slotted(*:not(:last-child)).wp-block-spacer,sc-form form>*:not(:last-child).wp-block-spacer{margin-bottom:0}sc-form .wp-block-columns .wp-block-column{margin:50px}\";\n\nconst ScForm = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scSubmit = createEvent(this, \"scSubmit\", 7);\n    this.scFormSubmit = createEvent(this, \"scFormSubmit\", 7);\n    this.scFormChange = createEvent(this, \"scFormChange\", 7);\n    /** Prevent the form from validating inputs before submitting. */\n    this.novalidate = false;\n  }\n  /** Serializes all form controls elements and returns a `FormData` object. */\n  async getFormData() {\n    return new FormData(this.formElement);\n  }\n  async getFormJson() {\n    return serialize(this.formElement);\n  }\n  async handleChange() {\n    this.scFormChange.emit(serialize(this.formElement));\n  }\n  async submit() {\n    return this.submitForm();\n  }\n  /** Gets all form control elements (native and custom). */\n  getFormControls() {\n    return [...this.form.querySelectorAll('*')];\n  }\n  async validate() {\n    const formControls = this.getFormControls();\n    const formControlsThatReport = formControls.filter((el) => typeof el.reportValidity === 'function');\n    if (!this.novalidate) {\n      for (const el of formControlsThatReport) {\n        const isValid = await el.reportValidity();\n        if (!isValid) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n  submitForm() {\n    // Calling form.submit() seems to bypass the submit event and constraint validation. Instead, we can inject a\n    // native submit button into the form, click it, then remove it to simulate a standard form submission.\n    const button = document.createElement('button');\n    if (this.formElement) {\n      button.type = 'submit';\n      button.style.position = 'absolute';\n      button.style.width = '0';\n      button.style.height = '0';\n      button.style.clip = 'rect(0 0 0 0)';\n      button.style.clipPath = 'inset(50%)';\n      button.style.overflow = 'hidden';\n      button.style.whiteSpace = 'nowrap';\n      this.formElement.append(button);\n      button.click();\n      button.remove();\n    }\n  }\n  render() {\n    return (h(\"div\", { part: \"base\", class: \"form\", role: \"form\" }, h(\"form\", { ref: el => (this.formElement = el), onSubmit: async (e) => {\n        e.preventDefault();\n        const isValid = await this.validate();\n        if (!isValid) {\n          return false;\n        }\n        this.scSubmit.emit();\n        this.scFormSubmit.emit();\n      }, novalidate: this.novalidate }, h(\"slot\", null))));\n  }\n  get form() { return getElement(this); }\n};\nScForm.style = scFormCss;\n\nexport { ScForm as sc_form };\n"],"names":["serialize","form","formData","FormData","object","forEach","value","key","ScForm","constructor","hostRef","r","this","scSubmit","c","scFormSubmit","scFormChange","novalidate","async","formElement","emit","submitForm","getFormControls","querySelectorAll","formControlsThatReport","filter","el","reportValidity","button","document","createElement","type","style","position","width","height","clip","clipPath","overflow","whiteSpace","append","click","remove","render","h","part","class","role","ref","onSubmit","e","preventDefault","validate","g"],"sourceRoot":""}