{"version":3,"file":"8286.js","mappings":"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","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/consumer-1db89974.js","webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-order-shipping-address.entry.js"],"sourcesContent":["import { g as getElement } from './index-430bb51b.js';\n\nvar createDeferredPromise = function () {\n    var resolve;\n    var promise = new Promise(function (res) { resolve = res; });\n    return { promise: promise, resolve: resolve };\n};\n\nvar openWormhole = function (Component, props, isBlocking) {\n    if (isBlocking === void 0) { isBlocking = true; }\n    var isConstructor = (Component.constructor.name === 'Function');\n    var Proto = isConstructor ? Component.prototype : Component;\n    var componentWillLoad = Proto.componentWillLoad;\n    Proto.componentWillLoad = function () {\n        var _this = this;\n        var el = getElement(this);\n        var onOpen = createDeferredPromise();\n        var event = new CustomEvent('openWormhole', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                consumer: this,\n                fields: props,\n                updater: function (prop, value) {\n                    var target = (prop in el) ? el : _this;\n                    target[prop] = value;\n                },\n                onOpen: onOpen,\n            },\n        });\n        el.dispatchEvent(event);\n        var willLoad = function () {\n            if (componentWillLoad) {\n                return componentWillLoad.call(_this);\n            }\n        };\n        return isBlocking ? onOpen.promise.then(function () { return willLoad(); }) : (willLoad());\n    };\n};\n\nexport { openWormhole as o };\n","import { r as registerInstance, c as createEvent, h } from './index-430bb51b.js';\nimport { _ as __ } from './default-i18n-c67eee5a.js';\nimport { o as openWormhole } from './consumer-1db89974.js';\nimport './_commonjsHelpers-9943807e.js';\n\nconst scOrderShippingAddressCss = \":host{display:block}.sc-order-shipping__loading{display:flex;flex-direction:column;gap:0.5em}\";\n\nconst ScOrderShippingAddress = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scUpdateOrder = createEvent(this, \"scUpdateOrder\", 7);\n    /** Is this required (defaults to true) */\n    this.required = true;\n    /** Placeholder values. */\n    this.placeholders = {\n      name: __('Name or Company Name', 'surecart'),\n      country: __('Country', 'surecart'),\n      city: __('City', 'surecart'),\n      line_1: __('Address', 'surecart'),\n      line_2: __('Address Line 2', 'surecart'),\n      postal_code: __('Postal Code/Zip', 'surecart'),\n      state: __('State/Province/Region', 'surecart'),\n    };\n    /** Address to pass to the component */\n    this.address = {\n      country: null,\n      city: null,\n      line_1: null,\n      line_2: null,\n      postal_code: null,\n      state: null,\n    };\n  }\n  /** When the customer shipping address changes, we want to use that instead of what's entered, if we have empty fields. */\n  handleCustomerAddressChange(val, old) {\n    // if the shipping address is blank, use the customer address.\n    if (!Object.keys(this.shippingAddress || {}).length && !old) {\n      this.address = { ...this.address, ...val };\n    }\n  }\n  /** When the shipping address changes, we want to update the passed address to match. */\n  handleShippingChange(val, old) {\n    var _a;\n    // let's only update it the first time.\n    if (!old) {\n      if (!(val === null || val === void 0 ? void 0 : val.country)) {\n        const country = (_a = navigator === null || navigator === void 0 ? void 0 : navigator.language) === null || _a === void 0 ? void 0 : _a.slice(-2).toUpperCase();\n        if (country) {\n          this.address = {\n            ...this.address,\n            country,\n          };\n        }\n      }\n      this.address = { ...this.address, ...val };\n    }\n  }\n  updateAddressState(address) {\n    if (address === this.address)\n      return; // no change, don't update.\n    this.address = address;\n    this.scUpdateOrder.emit({\n      data: {\n        shipping_address: this.address,\n      },\n    });\n  }\n  componentWillLoad() {\n    var _a, _b;\n    /** Set the country by browser language if not set. */\n    if (!((_a = this.address) === null || _a === void 0 ? void 0 : _a.country)) {\n      const country = (_b = navigator === null || navigator === void 0 ? void 0 : navigator.language) === null || _b === void 0 ? void 0 : _b.slice(-2).toUpperCase();\n      if (country) {\n        this.address = {\n          ...this.address,\n          country,\n        };\n      }\n    }\n  }\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n  render() {\n    if (this.shippingEnabled || this.full) {\n      return (h(\"sc-address\", { ref: el => (this.input = el), label: __('Shipping Address', 'surecart'), placeholders: this.placeholders, required: this.required, loading: this.loading, address: this.address, \"show-name\": this.showName, onScChangeAddress: e => this.updateAddressState(e.detail) }));\n    }\n    return (h(\"sc-compact-address\", { ref: el => (this.input = el), required: this.required, loading: this.loading, address: this.address, onScChangeAddress: e => this.updateAddressState(e.detail) }));\n  }\n  static get watchers() { return {\n    \"customerShippingAddress\": [\"handleCustomerAddressChange\"],\n    \"shippingAddress\": [\"handleShippingChange\"]\n  }; }\n};\nopenWormhole(ScOrderShippingAddress, ['shippingAddress', 'loading', 'customerShippingAddress', 'taxStatus', 'shippingEnabled'], false);\nScOrderShippingAddress.style = scOrderShippingAddressCss;\n\nexport { ScOrderShippingAddress as sc_order_shipping_address };\n"],"names":["openWormhole","Component","props","isBlocking","Proto","constructor","name","prototype","componentWillLoad","resolve","_this","this","el","g","onOpen","promise","Promise","res","event","CustomEvent","bubbles","composed","detail","consumer","fields","updater","prop","value","dispatchEvent","willLoad","call","then","ScOrderShippingAddress","hostRef","r","scUpdateOrder","c","required","placeholders","_","country","city","line_1","line_2","postal_code","state","address","handleCustomerAddressChange","val","old","Object","keys","shippingAddress","length","handleShippingChange","_a","navigator","language","slice","toUpperCase","updateAddressState","emit","data","shipping_address","_b","async","input","reportValidity","render","shippingEnabled","full","h","ref","label","loading","showName","onScChangeAddress","e","watchers","o","style"],"sourceRoot":""}