{"version":3,"file":"7282.js","mappings":"0JAQIA,EAAe,SAAUC,EAAWC,EAAOC,QACxB,IAAfA,IAAyBA,GAAa,GAC1C,IACIC,EADgD,aAA/BH,EAAUI,YAAYC,KACfL,EAAUM,UAAYN,EAC9CO,EAAoBJ,EAAMI,kBAC9BJ,EAAMI,kBAAoB,WACtB,IAXAC,EAWIC,EAAQC,KACRC,GAAK,IAAAC,GAAWF,MAChBG,EAXD,CAAEC,QADK,IAAIC,SAAQ,SAAUC,GAAOR,EAAUQ,CAAK,IAC/BR,QAASA,GAY5BS,EAAQ,IAAIC,YAAY,eAAgB,CACxCC,SAAS,EACTC,UAAU,EACVC,OAAQ,CACJC,SAAUZ,KACVa,OAAQtB,EACRuB,QAAS,SAAUC,EAAMC,IACPD,KAAQd,EAAMA,EAAKF,GAC1BgB,GAAQC,CACnB,EACAb,OAAQA,KAGhBF,EAAGgB,cAAcV,GACjB,IAAIW,EAAW,WACX,GAAIrB,EACA,OAAOA,EAAkBsB,KAAKpB,EAEtC,EACA,OAAOP,EAAaW,EAAOC,QAAQgB,MAAK,WAAc,OAAOF,GAAY,IAAMA,GACnF,CACJ,C,uDCtCA,MAAMG,EAAmB,CAACC,EAAa,GAAIC,EAAMC,KAC/C,IAAIC,EACJ,OAAyP,QAAjPA,GAAMH,GAAc,IAAII,MAAKC,IAAcA,aAA6C,EAASA,EAAUC,kBAAoBL,IAASI,aAA6C,EAASA,EAAUE,eAA2B,SAATL,YAAsC,IAAPC,OAAgB,EAASA,EAAGK,cAAc,C,8GCE7S,MAEMC,EAAgB,MACpBrC,YAAYsC,IACV,IAAAC,GAAiBjC,KAAMgC,GAEvBhC,KAAKuB,KAAO,UAEZvB,KAAKkC,KAAO,SAEZlC,KAAKmC,MAAO,EAEZnC,KAAKwB,KAAO,OAEZxB,KAAKoC,aAAe,KACtB,CACAC,mBAAmBC,GACjB,MAAM,UAAEC,EAAS,WAAEC,IAAe,IAAAtC,GAAiBF,KAAKsB,WAAY,SAAUtB,KAAKwB,MACnF,OAAKe,GAAcC,GAEX,IAAAC,GAAE,oBAAqB,CAAEH,QAASA,EAASI,KAAM1C,KAAK0C,KAAMlB,KAAMxB,KAAKwB,KAAMmB,MAAO3C,KAAK2C,MAAO,gBAAiB3C,KAAKoC,aAAc,YAAaG,EAAW,cAAeC,EAAYI,MAAO,WAAYC,MAAO,SADhN,IAEX,CACAC,SACE,OAAQ,IAAAL,GAAE,EAAAM,EAAU,KAAyB,WAAnB/C,KAAK2B,WAA0B3B,KAAKqC,mBAAmB,CAAC,WAA+B,gBAAnBrC,KAAK2B,WAA+B3B,KAAKqC,mBAAmB,CAAC,UAAU,IAAAI,GAAE,YAAa,CAAEO,OAA2B,WAAnBhD,KAAK2B,UAAwBsB,QAAQ,EAAM1B,KAAMvB,KAAKuB,KAAMW,KAAMlC,KAAKkC,KAAMC,KAAMnC,KAAKmC,KAAMe,QAASlD,KAAKkD,SAAWlD,KAAKmD,OAAQC,SAAUpD,KAAKkD,SAAWlD,KAAKmD,QAAUnD,KAAK0C,QAAU1C,KAAKqD,OAAQ,IAAAZ,GAAE,UAAW,CAAE9C,KAAMK,KAAKqD,KAAMC,KAAM,YAAa,IAAAb,GAAE,OAAQ,MAAOzC,KAAKuD,YAAc,IAAAd,GAAE,OAAQ,KAAM,KAAU,IAAAA,GAAE,WAAY,QACxgB,IAEF,IAAAe,GAAazB,EAAe,CAAC,OAAQ,UAAW,SAAU,aAAc,YAAa,OAAQ,eAAgB,UAAU,GACvHA,EAAc0B,MA3BW,2C","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/consumer-1db89974.js","webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/processor-6e16ca02.js","webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-order-submit.entry.js"],"sourcesContent":["import { g as getElement } from './index-430bb51b.js';\n\nvar createDeferredPromise = function () {\n    var resolve;\n    var promise = new Promise(function (res) { resolve = res; });\n    return { promise: promise, resolve: resolve };\n};\n\nvar openWormhole = function (Component, props, isBlocking) {\n    if (isBlocking === void 0) { isBlocking = true; }\n    var isConstructor = (Component.constructor.name === 'Function');\n    var Proto = isConstructor ? Component.prototype : Component;\n    var componentWillLoad = Proto.componentWillLoad;\n    Proto.componentWillLoad = function () {\n        var _this = this;\n        var el = getElement(this);\n        var onOpen = createDeferredPromise();\n        var event = new CustomEvent('openWormhole', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                consumer: this,\n                fields: props,\n                updater: function (prop, value) {\n                    var target = (prop in el) ? el : _this;\n                    target[prop] = value;\n                },\n                onOpen: onOpen,\n            },\n        });\n        el.dispatchEvent(event);\n        var willLoad = function () {\n            if (componentWillLoad) {\n                return componentWillLoad.call(_this);\n            }\n        };\n        return isBlocking ? onOpen.promise.then(function () { return willLoad(); }) : (willLoad());\n    };\n};\n\nexport { openWormhole as o };\n","const getProcessorData = (processors = [], type, mode) => {\n  var _a;\n  return (_a = (processors || []).find(processor => (processor === null || processor === void 0 ? void 0 : processor.processor_type) === type && (processor === null || processor === void 0 ? void 0 : processor.live_mode) === !!(mode === 'live'))) === null || _a === void 0 ? void 0 : _a.processor_data;\n};\n\nexport { getProcessorData as g };\n","import { r as registerInstance, h, F as Fragment } from './index-430bb51b.js';\nimport { o as openWormhole } from './consumer-1db89974.js';\nimport { g as getProcessorData } from './processor-6e16ca02.js';\n\nconst scOrderSubmitCss = \"sc-order-submit{display:block;width:auto}\";\n\nconst ScOrderSubmit = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    /** The button type. */\n    this.type = 'primary';\n    /** The button's size. */\n    this.size = 'medium';\n    /** Show a full-width button. */\n    this.full = true;\n    /** Is this created in \"test\" mode */\n    this.mode = 'live';\n    /** Currency Code */\n    this.currencyCode = 'usd';\n  }\n  renderPayPalButton(buttons) {\n    const { client_id, account_id } = getProcessorData(this.processors, 'paypal', this.mode);\n    if (!client_id && !account_id)\n      return null;\n    return (h(\"sc-paypal-buttons\", { buttons: buttons, busy: this.busy, mode: this.mode, order: this.order, \"currency-code\": this.currencyCode, \"client-id\": client_id, \"merchant-id\": account_id, label: \"checkout\", color: \"blue\" }));\n  }\n  render() {\n    return (h(Fragment, null, this.processor === 'paypal' && this.renderPayPalButton(['paypal']), this.processor === 'paypal-card' && this.renderPayPalButton(['card']), h(\"sc-button\", { hidden: this.processor !== 'stripe', submit: true, type: this.type, size: this.size, full: this.full, loading: this.loading || this.paying, disabled: this.loading || this.paying || this.busy }, !!this.icon && h(\"sc-icon\", { name: this.icon, slot: \"prefix\" }), h(\"slot\", null), this.showTotal && (h(\"span\", null, '\\u00A0', h(\"sc-total\", null))))));\n  }\n};\nopenWormhole(ScOrderSubmit, ['busy', 'loading', 'paying', 'processors', 'processor', 'mode', 'currencyCode', 'order'], false);\nScOrderSubmit.style = scOrderSubmitCss;\n\nexport { ScOrderSubmit as sc_order_submit };\n"],"names":["openWormhole","Component","props","isBlocking","Proto","constructor","name","prototype","componentWillLoad","resolve","_this","this","el","g","onOpen","promise","Promise","res","event","CustomEvent","bubbles","composed","detail","consumer","fields","updater","prop","value","dispatchEvent","willLoad","call","then","getProcessorData","processors","type","mode","_a","find","processor","processor_type","live_mode","processor_data","ScOrderSubmit","hostRef","r","size","full","currencyCode","renderPayPalButton","buttons","client_id","account_id","h","busy","order","label","color","render","F","hidden","submit","loading","paying","disabled","icon","slot","showTotal","o","style"],"sourceRoot":""}