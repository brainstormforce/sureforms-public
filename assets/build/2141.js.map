{"version":3,"file":"2141.js","mappings":"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","sources":["webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/consumer-1db89974.js","webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/index-13d9a120.js","webpack://sureforms/./node_modules/@surecart/components-react/node_modules/@surecart/components/dist/esm/sc-customer-email.entry.js"],"sourcesContent":["import { g as getElement } from './index-430bb51b.js';\n\nvar createDeferredPromise = function () {\n    var resolve;\n    var promise = new Promise(function (res) { resolve = res; });\n    return { promise: promise, resolve: resolve };\n};\n\nvar openWormhole = function (Component, props, isBlocking) {\n    if (isBlocking === void 0) { isBlocking = true; }\n    var isConstructor = (Component.constructor.name === 'Function');\n    var Proto = isConstructor ? Component.prototype : Component;\n    var componentWillLoad = Proto.componentWillLoad;\n    Proto.componentWillLoad = function () {\n        var _this = this;\n        var el = getElement(this);\n        var onOpen = createDeferredPromise();\n        var event = new CustomEvent('openWormhole', {\n            bubbles: true,\n            composed: true,\n            detail: {\n                consumer: this,\n                fields: props,\n                updater: function (prop, value) {\n                    var target = (prop in el) ? el : _this;\n                    target[prop] = value;\n                },\n                onOpen: onOpen,\n            },\n        });\n        el.dispatchEvent(event);\n        var willLoad = function () {\n            if (componentWillLoad) {\n                return componentWillLoad.call(_this);\n            }\n        };\n        return isBlocking ? onOpen.promise.then(function () { return willLoad(); }) : (willLoad());\n    };\n};\n\nexport { openWormhole as o };\n","import { a as apiFetch } from './fetch-d56a3ec0.js';\nimport { a as addQueryArgs } from './add-query-args-f4c5962b.js';\n\nconst baseUrl = 'surecart/v1/orders/';\nconst expand = [\n  'line_items',\n  'line_item.price',\n  'price.product',\n  'customer',\n  'customer.shipping_address',\n  'payment_intent',\n  'discount',\n  'discount.promotion',\n  'discount.coupon',\n  'shipping_address',\n  'tax_identifier',\n];\nconst parsePath = (id, endpoint = '') => {\n  let path = id ? `${baseUrl}${id}` : baseUrl;\n  path = `${path}${endpoint}`;\n  return addQueryArgs(path, {\n    expand,\n  });\n};\nconst createOrUpdateOrder = async ({ id, data, query = {} }) => {\n  return await apiFetch({\n    method: id ? 'PATCH' : 'POST',\n    path: addQueryArgs(parsePath(id), query),\n    data,\n  });\n};\n/**\n * Finalize a checkout session\n */\nconst finalizeSession = async ({ id, data = {}, query = {}, processor }) => {\n  return (await apiFetch({\n    method: 'POST',\n    path: addQueryArgs(parsePath(id, `/finalize/`), {\n      processor_type: processor,\n      ...query,\n    }),\n    data,\n  }));\n};\n\nexport { createOrUpdateOrder as c, expand as e, finalizeSession as f };\n","import { r as registerInstance, c as createEvent, h } from './index-430bb51b.js';\nimport { o as openWormhole } from './consumer-1db89974.js';\nimport { c as createOrUpdateOrder } from './index-13d9a120.js';\nimport './fetch-d56a3ec0.js';\nimport './default-i18n-c67eee5a.js';\nimport './_commonjsHelpers-9943807e.js';\nimport './add-query-args-f4c5962b.js';\n\nconst scCustomerEmailCss = \"sc-customer-email{display:block}\";\n\nconst ScCustomerEmail = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.scChange = createEvent(this, \"scChange\", 7);\n    this.scClear = createEvent(this, \"scClear\", 7);\n    this.scInput = createEvent(this, \"scInput\", 7);\n    this.scFocus = createEvent(this, \"scFocus\", 7);\n    this.scBlur = createEvent(this, \"scBlur\", 7);\n    this.scUpdateOrderState = createEvent(this, \"scUpdateOrderState\", 7);\n    /** The input's size. */\n    this.size = 'medium';\n    /** The input's value attribute. */\n    this.value = '';\n    /** Draws a pill-style input with rounded edges. */\n    this.pill = false;\n    /** Should we show the label */\n    this.showLabel = true;\n    /** The input's help text. */\n    this.help = '';\n    /** Disables the input. */\n    this.disabled = false;\n    /** Makes the input readonly. */\n    this.readonly = false;\n    /** Makes the input a required field. */\n    this.required = false;\n    /**\n     * This will be true when the control is in an invalid state. Validity is determined by props such as `type`,\n     * `required`, `minlength`, `maxlength`, and `pattern` using the browser's constraint validation API.\n     */\n    this.invalid = false;\n  }\n  async handleChange() {\n    var _a;\n    this.value = this.input.value;\n    this.scChange.emit();\n    // update order state.\n    try {\n      const order = (await createOrUpdateOrder({ id: (_a = this.order) === null || _a === void 0 ? void 0 : _a.id, data: { email: this.input.value } }));\n      this.scUpdateOrderState.emit(order);\n    }\n    catch (error) {\n      console.error(error);\n    }\n  }\n  /** Sync customer email with session if it's updated by other means */\n  handleSessionChange(val) {\n    if (val.email) {\n      if (val.email !== this.value) {\n        this.value = val.email;\n      }\n    }\n  }\n  async reportValidity() {\n    return this.input.reportValidity();\n  }\n  render() {\n    var _a;\n    return (h(\"sc-input\", { type: \"email\", name: \"email\", ref: el => (this.input = el), value: ((_a = this.customer) === null || _a === void 0 ? void 0 : _a.email) || this.value, label: this.label, help: this.help, autocomplete: 'email', placeholder: this.placeholder, disabled: !!this.loggedIn, readonly: this.readonly, required: true, invalid: this.invalid, autofocus: this.autofocus, hasFocus: this.hasFocus, onScChange: () => this.handleChange(), onScInput: () => this.scInput.emit(), onScFocus: () => this.scFocus.emit(), onScBlur: () => this.scBlur.emit() }));\n  }\n  static get watchers() { return {\n    \"order\": [\"handleSessionChange\"]\n  }; }\n};\nopenWormhole(ScCustomerEmail, ['order', 'customer', 'loggedIn'], false);\nScCustomerEmail.style = scCustomerEmailCss;\n\nexport { ScCustomerEmail as sc_customer_email };\n"],"names":["openWormhole","Component","props","isBlocking","Proto","constructor","name","prototype","componentWillLoad","resolve","_this","this","el","g","onOpen","promise","Promise","res","event","CustomEvent","bubbles","composed","detail","consumer","fields","updater","prop","value","dispatchEvent","willLoad","call","then","baseUrl","expand","parsePath","id","endpoint","path","a","createOrUpdateOrder","async","data","query","method","finalizeSession","processor","processor_type","ScCustomerEmail","hostRef","r","scChange","c","scClear","scInput","scFocus","scBlur","scUpdateOrderState","size","pill","showLabel","help","disabled","readonly","required","invalid","_a","input","emit","order","email","error","console","handleSessionChange","val","reportValidity","render","h","type","ref","customer","label","autocomplete","placeholder","loggedIn","autofocus","hasFocus","onScChange","handleChange","onScInput","onScFocus","onScBlur","watchers","o","style"],"sourceRoot":""}